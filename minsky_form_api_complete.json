{
  "documents": [
    "Общая схема работы проигрывателя\n\nПроцесс изменения модели\n\nПроцесс изменения значения компонента\n\nВзаимодействие со средой",
    "AS- общее пространство именAS.FORMS- проигрыватель, компоненты форм, утилитыAS.SERVICES- сервисыAS.LOGGER- логгер собщений и ошибок исполненияAS.OPTIONS- параметры приложения\n\nAS- общее пространство имен\n\nAS\n\nAS.FORMS- проигрыватель, компоненты форм, утилиты\n\nAS.FORMS\n\nAS.SERVICES- сервисы\n\nAS.SERVICES\n\nAS.LOGGER- логгер собщений и ошибок исполнения\n\nAS.LOGGER\n\nAS.OPTIONS- параметры приложения\n\nAS.OPTIONS",
    "В области видимости скрипта компонента имеются следующие\nпеременные:\n\nmodel- модель текущего компонента;view- отображение текущего компонента;editable- режим (просмотр / редактирование);model.playerModel- модель проигрывателя;view.playerView- отображение проигрывателя.\n\nmodel- модель текущего компонента;\n\nmodel\n\nview- отображение текущего компонента;\n\nview\n\neditable- режим (просмотр / редактирование);\n\neditable\n\nmodel.playerModel- модель проигрывателя;\n\nmodel.playerModel\n\nview.playerView- отображение проигрывателя.\n\nview.playerView\n\nСкрипт компонента выполняется каждый раз при смене режима\nпроигрывателя (просмотр - редактирование). При этоммоделькомпонента остается та же, аотображениекомпонента каждый\nраз пересоздается. Поэтому при написании скриптов следует\nучесть следующее: если добавляются или переписываются методы\nмодели, либо происходит подписывание на события другой модели,\nто рекомендуется использовать следующее:\n\nif(!model.inited){//манипулирование моделямиmodel.inited=true;}\n\nЧтобы указать значение компонента при создании данных по форме,\nследует написать скрипт:\n\n/*подписаться на событие изменения значения модели*/model.on(AS.FORMS.EVENT_TYPE.valueChange,function(_1,_2,value){/*если значение меняется на null, то инициализируем значение*/if(value==null){console.log('setting init value value',model);model.setValue('2017-08-01 09:00:00');}})\n\n«Строгий режим» JavaScript:\n\nНачиная с версии Synergy 3.14, все пользовательские скрипты\nвыполняются с добавлением директивыusestrict. Эта директива\nозначает, что соответствующий ей код будет выполнятся в так\nназываемом«строгом режиме», поддерживающем стандартJavaScriptECMAScript5\n\nusestrict\n\nПредупреждение\n\nЕсли код скрипта содержит конструкции, не соответствующие стандарту ES5, то они не будут выполняться. Это не является ошибкой Synergy.",
    "Пользовательский компонент (ПК) - это компонент, написанный разработчиком Synergy,\nкоторый можно использовать на форме либо в ui Synergy.\nВ данной главе речь пойдет о пользовательском компоненте, который будет использован на форме.\nДля настройки компонента необходимо в разделе Процессы конфигуратора выбрать пункт «Пользовательские компоненты».\n\nВ области редактирования компонета можно ввести название, код, HTML код и JAVASCRIPT код (js код),\nа также указать будет ли использован компонент в формах.\n\nКак и любой компонент на форме, пользовательский компонент имеет модельCustomComponentModelи отображениеCustomComponentView.\n\nCustomComponentModel\n\nCustomComponentView\n\nСхема загрузки пользовательского компонента на форме\n\nПри создании функции на основе js кода ПК, основной код начинается с объявления переменныхvarmodel=arguments[0],view=arguments[1],editable=arguments[2];\n\nvarmodel=arguments[0],view=arguments[1],editable=arguments[2];\n\nПеременнаяmodelхранит значение модели,view- отображение компонента.\nПеременнаяeditableопределяет режим отображения: редактирование или чтение.\nПоскольку схема загрузки ПК на форме отрабатывает каждый раз при изменении режима отображения проигрывателя,\nто и значения переменных так же будут актуальными.\n\nmodel\n\nview\n\neditable\n\nПеред созданием нового компонента необходимо определиться со следующими вопросами:\n\nКакие данные он будет хранить?Какие ошибки валидации данного компонента существуют?Как компонент должен выглядеть в режиме просмотра, редактирования, неправильно заполненным в режиме редактирования?\n\nКакие данные он будет хранить?\n\nКакие ошибки валидации данного компонента существуют?\n\nКак компонент должен выглядеть в режиме просмотра, редактирования, неправильно заполненным в режиме редактирования?\n\nОтветив на эти вопросы, можно приступить к написанию компонента.\n\nПредположим, нужно хранить в качестве значения компонента 3 поля:\n\ntext - введенный текст;title - подсказка (будет состоять из текста с постфиксом);info - дополнительная информация.\n\ntext - введенный текст;\n\ntitle - подсказка (будет состоять из текста с постфиксом);\n\ninfo - дополнительная информация.\n\nТаким образом, в переменной value модели будет объект, содержащий эти 3 поля. Например:\n\nvalue={text:1,title:«Подсказка»,info:«Дополнительнаяинформация»}\n\nvalue={text:1,title:«Подсказка»,info:«Дополнительнаяинформация»}\n\nДанный объект необходимо передавать в метод моделиsetValue, а получать в методе моделиgetValue.\n\nsetValue\n\ngetValue\n\nЧтобы эти данные сохранялись в файл по форме и поднимались при последующем открытии, необходимо реализовать 2 метода модели:\n\ngetAsfData(blockNumber)setAsfData(asfData)\n\ngetAsfData(blockNumber)\n\nsetAsfData(asfData)\n\nНеобходимо учесть, что поля сохраняемого объекта asfData могут иметь лишь следующий перечень наименований:\n\nvalue - обычно это текстовое значение компонента;key - обычно это значение компонента;valueID - дополнительный идентификатор;username - имя пользователя;userID - идентификатор пользователя;values - массив строк;keys - массив строк.\n\nvalue - обычно это текстовое значение компонента;\n\nkey - обычно это значение компонента;\n\nvalueID - дополнительный идентификатор;\n\nusername - имя пользователя;\n\nuserID - идентификатор пользователя;\n\nvalues - массив строк;\n\nkeys - массив строк.\n\nВсе эти поля необязательны, но объект, сохраняемый в файле по форме, может иметь только такие свойства.\n\nПример реализации этих методов:\n\nmodel.getAsfData=function(blockNumber){if(model.getValue()){/*следующий метод сформирует правильную запись для сохранения в файле по формепри этом:model.getValue().title — запишется в поле valuemodel.getValue().text — запишется в поле key*/varresult=AS.FORMS.ASFDataUtils.getBaseAsfData(model.asfProperty,blockNumber,model.getValue().title,model.getValue().text);/* дописываем необходимую информацию в поле valueID*/result.valueID=model.getValue().info;returnresult;}else{returnAS.FORMS.ASFDataUtils.getBaseAsfData(model.asfProperty,blockNumber);}};model.setAsfData=function(asfData){if(!asfData||!asfData.value){return;}/*читаем данные из объекта из файла по форме: дополнительная информация была сохранена в поле valueID и теперь читаем из него*/varvalue={text:asfData.key,title:asfData.value,info:asfData.valueID};model.setValue(value);};\n\nДалее необходимо определить список специальных ошибок.\nДля этого необходимо переопределить метод модели getSpecialErrors.\n\nmodel.getSpecialErrors=function(){if(model.getValue()){if(model.getValue().text=='0'){return{id:model.asfProperty.id,errorCode:AS.FORMS.INPUT_ERROR_TYPE.wrongValue};}}};\n\nВ данном примере проверяется, является ли значение равным 0.\nЕсли да, то это значит, что компонент неправильно заполнен и возвращается ошибка.\nSynergy при этом будет показывать, что данные заполнены некорректно.\n\nРабота с моделью теперь завершена.\n\nДалее будем работать с отображением.\n\nПредположим, что на вопрос №3 даны следующие ответы:\n\nВ режиме просмотра компонент должен представлять собой просто подпись.В режиме редактирования - это поле ввода.Необходимо отображать подсказку над полем ввода и подписьюНеправильно заполненное поле должно подсвечивать красным кнопку компонента.Необходимо инициализировать отображение, в зависимости от режима (просмотр или редактирование).\n\nВ режиме просмотра компонент должен представлять собой просто подпись.\n\nВ режиме редактирования - это поле ввода.\n\nНеобходимо отображать подсказку над полем ввода и подписью\n\nНеправильно заполненное поле должно подсвечивать красным кнопку компонента.\n\nНеобходимо инициализировать отображение, в зависимости от режима (просмотр или редактирование).\n\nВ области видимости есть переменная editable:\n\neditable = false соответствует режиму просмотра;editable = true соответствует режиму редактирования.\n\neditable = false соответствует режиму просмотра;\n\neditable = true соответствует режиму редактирования.\n\nHTML кодом для компонента будет следующим:\n\n<divinnerId ='label'></div><inputinnerId ='input'type=\"text\"class=\"asf-textBox\"style=\"text-align: left; font-family: Arial, sans-serif; font-size: 12px;\">\n\nДля режима просмотра берем div с innerId label, куда будет вставлено тестовое описание поля, и реализовать метод updateValueFromModel.\nДля режима редактирования берем компонент input и выполняем те же действия.\n\nПример:\n\nvarlabel=jQuery(view.container).children(\"[innerId='label']\");varinput=jQuery(view.container).children(\"[innerId='input']\");if(editable){label.hide();input.show();}else{label.show();input.hide();}// метод обновления отображения согласно изменившимся даннымview.updateValueFromModel=function(){if(model.getValue()){label.html(model.getValue().text);label.attr(\"title\",model.getValue().title);input.val(model.getValue().text);input.attr(\"title\",model.getValue().title);}else{label.html(\"\");input.val(\"\");}};/*** при вводе в input изменяем значение модели*/input.on(\"input\",function(){varvalue={text:input.val(),title:input.val()+\" \"+\"postfix title\",info:\"additional info\"};model.setValue(value);});// подписываемся на событие модели об изменении, чтобы записать в label и input актуальные данныеmodel.on(AS.FORMS.EVENT_TYPE.valueChange,function(){view.updateValueFromModel();});// подписываем на событие подгрузки для актуализации label и inputmodel.on(AS.FORMS.EVENT_TYPE.dataLoad,function(){view.updateValueFromModel();});\n\nПри любом изменении модели автоматически вызовется метод updateValueFromModel и значение изменится.\n\nРеализуем методы  markInvalid, unmarkInvalid.\n\nПример:\n\n/*** метод помечает поле как неправильно заполненное*/view.markInvalid=function(){label.css(\"background-color\",\"#aa3344\");input.css(\"background-color\",\"#aa3344\");};/*** метод убирает пометку неправильно заполненного поля*/view.unmarkInvalid=function(){input.css(\"background-color\",\"\");label.css(\"background-color\",\"\");};\n\nПри сохранении данных по форме компонент будет хранить значение в следующем виде:\n\n{\"id\":\"custom-ch8p9w\",\"type\":\"custom\",\"value\":\"11111 postfix title\",\"key\":\"11111\",\"valueID\":\"additional info\"}\n\nПолный js-код компонента:\n\nmodel.getAsfData=function(blockNumber){if(model.getValue()){/*следующий метод сформирует правильную запись для сохранения в файле по формепри этом:model.getValue().title — запишется в поле valuemodel.getValue().text — запишется в поле key*/varresult=AS.FORMS.ASFDataUtils.getBaseAsfData(model.asfProperty,blockNumber,model.getValue().title,model.getValue().text);/* дописываем необходимую информацию в поле valueID*/result.valueID=model.getValue().info;returnresult;}else{returnAS.FORMS.ASFDataUtils.getBaseAsfData(model.asfProperty,blockNumber);}};model.setAsfData=function(asfData){if(!asfData||!asfData.value){return;}/*читаем данные из объекта из файла по форме: дополнительная информация была сохранена в поле valueID и теперь читаем из него*/varvalue={text:asfData.key,title:asfData.value,info:asfData.valueID};model.setValue(value);};model.getSpecialErrors=function(){if(model.getValue()){if(model.getValue().text=='0'){return{id:model.asfProperty.id,errorCode:AS.FORMS.INPUT_ERROR_TYPE.wrongValue};}}};varlabel=jQuery(view.container).children(\"[innerId='label']\");varinput=jQuery(view.container).children(\"[innerId='input']\");if(editable){label.hide();input.show();}else{label.show();input.hide();}// метод обновления отображения согласно изменившимся даннымview.updateValueFromModel=function(){console.log(model.getValue());if(model.getValue()){label.html(model.getValue().text);label.attr(\"title\",model.getValue().title);input.val(model.getValue().text);input.attr(\"title\",model.getValue().title);}else{label.html(\"\");input.val(\"\");}};// подписываемся на событие модели об изменении, чтобы записать в label и input актуальные данныеmodel.on(AS.FORMS.EVENT_TYPE.valueChange,function(){view.updateValueFromModel();});// подписываем на событие подгрузки для актуализации label и inputmodel.on(AS.FORMS.EVENT_TYPE.dataLoad,function(){view.updateValueFromModel();});/*** метод помечает поле как неправильно заполненное*/view.markInvalid=function(){label.css(\"background-color\",\"#aa3344\");input.css(\"background-color\",\"#aa3344\");};/*** метод убирает пометку неправильно заполненного поля*/view.unmarkInvalid=function(){input.css(\"background-color\",\"\");label.css(\"background-color\",\"\");};/*** при вводе в input изменяем значение модели*/input.on(\"input\",function(){varvalue={text:input.val(),title:input.val()+\" postfix\",info:\"additional info\"};model.setValue(value);});view.updateValueFromModel();\n\n3.4.1. Пользовательский компонентКнопка3.4.2. Пользовательский компонентВыбор и создание записи реестра3.4.3. Пользовательский компонентВоронка продаж\n\n3.4.1. Пользовательский компонентКнопка\n\n3.4.2. Пользовательский компонентВыбор и создание записи реестра\n\n3.4.3. Пользовательский компонентВоронка продаж",
    "Рассмотрим пример создания пользовательского компонента в виде кнопки, надпись которой будет получена из значения справочника,\nа по клику по кнопке будет меняться значение другого компонента на форме.\n\nВ HTML код следует вводить код, отвечающий за отображение копмонента на форме.\nВ нашем случае HTML код будет содержать следующее:\n\n```\n<style>\n.greenButton {\n    background-color: #49b785 !important;\n    border-color: #49b785 !important;\n    color: #ffffff !important;\n}\n.ui-btn {\n    display: inline-block;\n    background-color: #ffffff;\n    color:#4c5256;\n    height: 32px;\n    min-width: 32px;\n    padding-left: 45px;\n    padding-right: 45px;\n    border: none;\n    border-radius: 4px;\n    -webkit-border-radius: 4px;\n    -moz-border-radius: 4px;\n    font-size: 14px !important;\n    font-weight: bold;\n}\n</style>\n<button class=\"greenButton ui-btn\"\nrole=\"button\" style=\"display: block;\" innerId='make_deal'>Создать</button>\n\n```\n\nЗдесь указана кнопка со стилямиgreenButtonui-btn, которые описываются в блоке<style></style>\n\n```\ngreenButton ui-btn\n```\n\n```\n<style></style>\n```\n\nВ JAVASCRIPT код вводится код, отвечающий за логику компонента.\n\nВ нашем примере это будет:\n\n```\n// находим кнопку с innerId make_deal\nvar button = jQuery(view.container).children(\"[innerId='make_deal']\");\nvar locale = AS.OPTIONS.locale;\n//переменная, значение которой будет присвоено компоненту crm_form_lead_deals_status, по клику по кнопке\nvar statusValue;\n// из кэша справочников получаем значения справочника Статусы с кодом crm_dict_leadStatus и устанавливаем надпись кнопки\n// по значению поля crm_dict_leadStatus_end = 1\nmodel.playerModel.dictionaryCache.getDictionary('crm_dict_leadStatus', AS.OPTIONS.locale, function(dictionary) {\n    if(dictionary !==  null) {\n        dictionary.forEach(function(data, index){\n            //финальный статус в справочнике статусов\n            if (data['crm_dict_leadStatus_end'] === '1') {\n                statusValue = data['crm_dict_leadStatus_value'];\n                button.text(data['crm_dict_leadStatus_buttonName']);\n            }\n        });\n    }\n});\n//по клику по кнопку устанавливаем значение компонента crm_form_lead_deals_status\nbutton.click(function(){\n    model.playerModel.getModelWithId('crm_form_lead_deals_status').setValue(statusValue + '');\n});\n\n```\n\nТакже необходимо отметить чекбоксИспользовать в формах.\n\nПользовательский компонент crm_component_deal_button\n\nПользовательский компонент crm_component_deal_button\n\nДальше этот компонент можно использовать на форме.\n\nДля этого создадим форму с компонентом выпадающий список с ид crm_form_lead_deals_status и значениями справочника Статусы лида.\n\nСправочникСтатусы лидаимеет структуру:\n\nСправочникСтатусы лида\n\nСправочникСтатусы лида\n\nЗначения справочникаСтатусы лида:\n\nТакже добавим пользовательский компонент и укажем в диалоге настроек компонент crm_component_deal_button.\n\nПользовательский компонент crm_component_deal_button на форме\n\nПользовательский компонент crm_component_deal_button на форме\n\nПереключим конструктор в режим редактирования, будет отображена кнопка с надписьюКонвертировать в сделку\n\nФорма с пользовательским копмонентом crm_component_deal_button\n\nФорма с пользовательским копмонентом crm_component_deal_button\n\nКликом по кнопкеКонвертировать в сделкувыпадающий список примет значениеВ сделку\n\nФорма после клика по кнопкеКонвертировать в сделку\n\nФорма после клика по кнопкеКонвертировать в сделку",
    "Рассмотрим пример создания пользовательского компонента в виде кнопки, надпись которой будет получена из значения справочника,\nа по клику по кнопке будет меняться значение другого компонента на форме.\n\nВ HTML код следует вводить код, отвечающий за отображение копмонента на форме.\nВ нашем случае HTML код будет содержать следующее:\n\n```\n<style>\n.greenButton {\n    background-color: #49b785 !important;\n    border-color: #49b785 !important;\n    color: #ffffff !important;\n}\n.ui-btn {\n    display: inline-block;\n    background-color: #ffffff;\n    color:#4c5256;\n    height: 32px;\n    min-width: 32px;\n    padding-left: 45px;\n    padding-right: 45px;\n    border: none;\n    border-radius: 4px;\n    -webkit-border-radius: 4px;\n    -moz-border-radius: 4px;\n    font-size: 14px !important;\n    font-weight: bold;\n}\n</style>\n<button class=\"greenButton ui-btn\"\nrole=\"button\" style=\"display: block;\" innerId='make_deal'>Создать</button>\n\n```\n\nЗдесь указана кнопка со стилямиgreenButtonui-btn, которые описываются в блоке<style></style>\n\n```\ngreenButton ui-btn\n```\n\n```\n<style></style>\n```\n\nВ JAVASCRIPT код вводится код, отвечающий за логику компонента.\n\nВ нашем примере это будет:\n\n```\n// находим кнопку с innerId make_deal\nvar button = jQuery(view.container).children(\"[innerId='make_deal']\");\nvar locale = AS.OPTIONS.locale;\n//переменная, значение которой будет присвоено компоненту crm_form_lead_deals_status, по клику по кнопке\nvar statusValue;\n// из кэша справочников получаем значения справочника Статусы с кодом crm_dict_leadStatus и устанавливаем надпись кнопки\n// по значению поля crm_dict_leadStatus_end = 1\nmodel.playerModel.dictionaryCache.getDictionary('crm_dict_leadStatus', AS.OPTIONS.locale, function(dictionary) {\n    if(dictionary !==  null) {\n        dictionary.forEach(function(data, index){\n            //финальный статус в справочнике статусов\n            if (data['crm_dict_leadStatus_end'] === '1') {\n                statusValue = data['crm_dict_leadStatus_value'];\n                button.text(data['crm_dict_leadStatus_buttonName']);\n            }\n        });\n    }\n});\n//по клику по кнопку устанавливаем значение компонента crm_form_lead_deals_status\nbutton.click(function(){\n    model.playerModel.getModelWithId('crm_form_lead_deals_status').setValue(statusValue + '');\n});\n\n```\n\nТакже необходимо отметить чекбоксИспользовать в формах.\n\nПользовательский компонент crm_component_deal_button\n\nПользовательский компонент crm_component_deal_button\n\nДальше этот компонент можно использовать на форме.\n\nДля этого создадим форму с компонентом выпадающий список с ид crm_form_lead_deals_status и значениями справочника Статусы лида.\n\nСправочникСтатусы лидаимеет структуру:\n\nСправочникСтатусы лида\n\nСправочникСтатусы лида\n\nЗначения справочникаСтатусы лида:\n\nТакже добавим пользовательский компонент и укажем в диалоге настроек компонент crm_component_deal_button.\n\nПользовательский компонент crm_component_deal_button на форме\n\nПользовательский компонент crm_component_deal_button на форме\n\nПереключим конструктор в режим редактирования, будет отображена кнопка с надписьюКонвертировать в сделку\n\nФорма с пользовательским копмонентом crm_component_deal_button\n\nФорма с пользовательским копмонентом crm_component_deal_button\n\nКликом по кнопкеКонвертировать в сделкувыпадающий список примет значениеВ сделку\n\nФорма после клика по кнопкеКонвертировать в сделку\n\nФорма после клика по кнопкеКонвертировать в сделку",
    "Данный пользовательский компонент расширяет функциональность компонента выбор записи реестра, добавив к нему следующие\nвозможности:\n\n- создание записи реестра;\n- просмотр файла по форме в диалоге;\n- удаление выбранного значения.\n\nНа форме компонент отображается следующим образом:\n\nПользовательский компонентВыбор и создание записи реестра\n\nПользовательский компонентВыбор и создание записи реестра\n\nHtml код компонента содержит следующий код:\n\n```\n<style>\n.edit {\n    border: 1px solid black;\n    float: right;\n    background: url('light/images/buttons/dark.gray/edit.png') 50%;\n    width: 30px;\n    height: 22px;\n    background-repeat: no-repeat;\n    border-radius: 5px;\n    border-color: gray;\n}\n.edited{\n    background-color: #efefef;\n}\n</style>\n\n//ссылка на документ реестра\n<div style=\"text-decoration:underline; cursor:pointer;width:calc(100% ); color:#06f; margin-bottom:2px\"\n     innerId=\"textView\" ></div>\n//поле ввода для поиска записи реестра\n<input type=\"text\" class=\"asf-textBox\" innerId=\"name\" style=\"width:calc(100% )\"/>\n//надпись, по клику на которой откроется диалог с формой для заполнения\n<div style=\"color:#606060; text-decoration:underline\" class=\"asf-InlineBlock asf-cursorPointer\"\n     innerId=\"add\">+Создать</div>\n//надпись, по клику по которой открывается диалог выбора записи реестра\n<div style=\"color:#606060; margin-left:10px; text-decoration:underline\"\n     class=\"asf-InlineBlock asf-cursorPointer\"\n     innerId=\"browse\">Выбрать из реестра</div>\n//надпись для удаления выбранного значения\n<div style=\"color:#606060; margin-left:10px; text-decoration:underline\"\n     class=\"asf-InlineBlock asf-cursorPointer\"\n     innerId=\"delete\">&#10005; Удалить</div>\n\n```\n\nЗначение этого пользовательского компонента будет сохраняться со значениями остальных компонентов, в этом заключается\nотличие от пользовательского компонентаКнопка, который просто выполнял действие по клику.\n\nСпособ хранения выбранного значения, как и поведение всего компонента, описывается скриптом в блоке JAVASCRIPT код.\n\nДанные компонента будут храниться в виде:\n\n```\n{\n    \"id\":\"custom-zthfcc\",\n    \"type\":\"custom\",\n    \"value\":\"Услуга3\",\n    \"key\":\"c38e83a0-c065-4dec-a334-d32e63fcb0b4\"\n}\n\n```\n\nЗдесьid- это идентификатор компонента,type- тип,value- значение,key- ключ компонента\n\nЗа способ хранения данных компонента отвечает следующий кусок кода:\n\n```\n/**\n * метод реализовывает получение данных компонента для хранения\n * @param blockNumber\n * @returns {*}\n */\nmodel.getAsfData = function (blockNumber) {\n    return AS.FORMS.ASFDataUtils.getBaseAsfData(model.asfProperty, blockNumber, model.textValue, model.value);\n};\n\n```\n\nЗдесь в качествеvalueпередаем параметр model.textValue, который обновляется каждый раз при изменении значения компонента:\n\n```\n/**\n * обновить текстовое представление записи реестра\n */\nmodel.updateTextView = function () {\n    if (!model.getValue()) {\n        model.textValue = \"\";\n        model.asfDataId = null;\n        model.trigger(AS.FORMS.EVENT_TYPE.dataLoad, [model]);\n        return;\n    }\n    AS.FORMS.ApiUtils.getAsfDataUUID(model.getValue(), function (newAsfDataId) {\n        model.asfDataId = newAsfDataId;\n        if(!registry) return;\n        AS.FORMS.ApiUtils.getDocMeaningContent(registry.registryID, newAsfDataId, function (text) {\n            if (text === null || text === '') {\n                model.textValue = i18n.tr('Документ');\n            } else {\n                model.textValue = text;\n            }\n            model.trigger(AS.FORMS.EVENT_TYPE.dataLoad, [model]);\n        });\n    });\n};\n\n```\n\nПереопределяем методsetAsfDataмодели, в данном случае в качестве значения выступаетkey(ид документа выбранной записи).\n\n```\nsetAsfData\n```\n\n```\nkey\n```\n\n```\n/**\n * метод реализовывает вставку asfData\n * @param asfData\n */\nmodel.setAsfData = function (asfData) {\n    model.setValue(asfData.key);\n};\n\n```\n\nВ скрипте компонента на форме необходимо прописать код реестра, записи которого будут выбраны либо созданы.\nЭто указывается следующим образом:\n\nСкрипт компонента на форме\n\nСкрипт компонента на форме\n\nВ результате получим следующий компонент:\n\nПолный javascript код компонента с комментариями:\n\n```\n/**\n * обновить текстовое представление записи реестра\n */\nmodel.updateTextView = function () {\n    if (!model.getValue()) {\n        model.textValue = \"\";\n        model.asfDataId = null;\n        model.trigger(AS.FORMS.EVENT_TYPE.dataLoad, [model]);\n        return;\n    }\n    AS.FORMS.ApiUtils.getAsfDataUUID(model.getValue(), function (newAsfDataId) {\n        model.asfDataId = newAsfDataId;\n        AS.FORMS.ApiUtils.getDocMeaningContent(registry.registryID, newAsfDataId, function (text) {\n            if (text === null || text === '') {\n                model.textValue = i18n.tr('Документ');\n            } else {\n                model.textValue = text;\n            }\n            model.trigger(AS.FORMS.EVENT_TYPE.dataLoad, [model]);\n        });\n    });\n};\n\n/**\n * получить тесктовое представление записи реестра\n * @returns {string|string|*}\n */\nmodel.getTextValue = function () {\n    return model.textValue;\n};\n\n// подписываемся на событие модели об изменении содержания, чтобы подгрузить дополнительные данные\nmodel.on(AS.FORMS.EVENT_TYPE.valueChange, function () {\n    model.updateTextView();\n});\n\n/**\n * метод реализовывает вставку asfData\n * @param asfData\n */\nmodel.setAsfData = function (asfData) {\n    model.setValue(asfData.key);\n};\n\n/**\n * метод реализовывает получение данных компонента для хранения\n * @param blockNumber\n * @returns {*}\n */\nmodel.getAsfData = function (blockNumber) {\n    return AS.FORMS.ASFDataUtils.getBaseAsfData(model.asfProperty, blockNumber, model.textValue, model.value);\n};\n\n\n/* инициализация отображения */\n\n\n/**\n * реестр\n * @type {object}\n */\nvar registry = null;\n/**\n * видимые колонки реестра\n * @type {Array}\n */\nvar registryColumns = [];\n\n\n/**\n * поле ввода для поиска записей реестра\n * @type {XMLList|*}\n */\nvar input = jQuery(view.container).children(\"[innerId='name']\");\n/**\n * поле для отображения выбранной записи реестра\n * @type {XMLList|*}\n */\nvar textView = jQuery(view.container).children(\"[innerId='textView']\");\n/**\n * кнопка добавления записи\n * @type {XMLList|*}\n */\nvar addIcon = jQuery(view.container).children(\"[innerId='add']\");\n/**\n * кнопка выбора записи из реестра\n * @type {XMLList|*}\n */\nvar browseIcon = jQuery(view.container).children(\"[innerId='browse']\");\n/**\n * кнопка удаления текущей выбранной записи\n * @type {XMLList|*}\n */\nvar deleteIcon = jQuery(view.container).children(\"[innerId='delete']\");\n\n// кнопку удаления текущей выбраннйо записи скрываем\ndeleteIcon.hide();\n\n// по нажатию на кнопку \"выбрать из реестра\" открываем стандартный диалог выбра записи реестра\nbrowseIcon.click(function () {\n    AS.SERVICES.showRegisterLinkDialog(registry, function (documentId) {\n        model.setValue(documentId);\n    });\n});\n\n// по нажатию на кнопку \"создать\" открываем форму создания записи реестра\naddIcon.click(function () {\n    if (!registry.rr_create) {\n        alert(\"У вас нет прав на создание записей данного реестра\");\n        return;\n    }\n\n    var createPlayerDiv = jQuery(\"<div>\");\n    createPlayerDiv.css(\"width\", \"1000px\");\n    createPlayerDiv.css(\"height\", \"700px\");\n\n    createPlayerDiv.css(\"border\", \"1px solid #afafaf\");\n\n    var saveButton = jQuery(\"<button>\", {class: \"ns-approveButton ns-basicChooserApplyButton\"});\n    saveButton.button();\n    saveButton.html(i18n.tr(\"Создать\"));\n    saveButton.css(\"margin\", \"auto\");\n    saveButton.css(\"display\", \"block\");\n    saveButton.css(\"margin-top\", \"10px\");\n    saveButton.css(\"margin-bottom\", \"10px\");\n\n    var player = AS.FORMS.createPlayer();\n\n    player.view.setEditable(true);\n    player.showFormData(registry.formId);\n    player.view.appendTo(createPlayerDiv);\n\n    player.model.on(AS.FORMS.EVENT_TYPE.dataLoad, function () {\n        console.log(player.model);\n        var registryModel = null;\n        if (player.model.formCode === 'crm_form_contact') {\n            registryModel = player.model.getModelWithId('crm_form_contact_lead_lead', 'crm_form_contact_lead');\n        }\n        if (player.model.formCode === 'crm_form_account') {\n            registryModel = player.model.getModelWithId('crm_form_account_lead_lead', 'crm_form_account_lead');\n        }\n        if (player.model.formCode === 'crm_form_dealActivity') {\n            registryModel = player.model.getModelWithId('crm_form_dealActivity_main_deal');\n        }\n        if (player.model.formCode === 'crm_form_leadActivity') {\n            registryModel = player.model.getModelWithId('crm_form_leadActivity_main_lead');\n        }\n        if (registryModel != null) {\n            registryModel.setValue(AS.SERVICES.getParameterByName(\"document_identifier\", window.location.href));\n        }\n    });\n\n    createPlayerDiv.append(saveButton);\n\n\n    createPlayerDiv.dialog({\n        width: 1000,\n        height: 700,\n        modal: true\n    });\n\n\n    saveButton.click(function () {\n        var valid = player.model.isValid();\n        if (!valid) {\n            alert(i18n.tr(\"Введите все обязательные поля\"));\n            return;\n        }\n\n        AS.SERVICES.showWaitWindow();\n        AS.FORMS.ApiUtils.simpleAsyncGet(\"rest/api/registry/create_doc?registryID=\" + registry.registryID, function (result) {\n            if (result.errorCode != 0) {\n                AS.SERVICES.hideWaitWindow();\n                alert(i18n.tr(\"Во время сохранения данных по форме произошли ошибки. Обратитесь к администратору\"));\n                return;\n            }\n            player.model.asfDataId = result.dataUUID;\n            player.saveFormData(function (result) {\n                AS.SERVICES.hideWaitWindow();\n                if (_.isUndefined(result)) {\n                    alert(i18n.tr(\"Во время сохранения данных по форме произошли ошибки. Обратитесь к администратору\"));\n                    return;\n                };\n\n\n                createPlayerDiv.dialog(\"destroy\");\n\n                AS.FORMS.ApiUtils.getDocumentIdentifier(result, function (documentID) {\n                    /*в качестве значения компонента указываем ид созданного документа*/\n                    model.setValue(documentID);\n                });\n\n            });\n        });\n\n    });\n\n\n});\n\n\n// по нажатию на кнопку удалить  - удаляем выбранное значение\ndeleteIcon.click(function(){\n    model.setValue(null);\n});\n\n\n// по нажатию на текстовое отображение  - открываем запись реестра на просмотр\ntextView.click(function () {\n    var createPlayerDiv = jQuery(\"<div>\");\n    createPlayerDiv.css(\"width\", \"1000px\");\n    createPlayerDiv.css(\"height\", \"700px\");\n\n    var editButton = jQuery('<div class=\"edit\"></div>');\n\n    var saveButton = jQuery(\"<button>\", {class: \"ns-approveButton ns-basicChooserApplyButton\"});\n    saveButton.button();\n    saveButton.html(i18n.tr(\"Сохранить\"));\n    saveButton.css(\"margin\", \"auto\");\n    saveButton.css(\"display\", \"block\");\n    saveButton.css(\"margin-top\", \"10px\");\n    saveButton.css(\"margin-bottom\", \"10px\");\n\n    if (registry.code == 'crm_registry_leadActivities' || registry.code == 'crm_registry_dealActivities') {\n        createPlayerDiv.append(editButton);\n\n        editButton.click(function () {\n            if (player.view.editable) {\n                player.view.setEditable(false);\n                editButton.removeClass('edited');\n                saveButton.hide();\n            } else {\n                player.view.setEditable(true);\n                editButton.addClass('edited');\n                saveButton.show();\n            }\n        });\n    }\n\n    createPlayerDiv.css(\"border\", \"1px solid #afafaf\");\n\n    var player = AS.FORMS.createPlayer();\n\n    player.view.setEditable(false);\n    player.showFormData(null, null, model.asfDataId, 0);\n    player.view.appendTo(createPlayerDiv);\n    createPlayerDiv.append(saveButton);\n    saveButton.hide();\n\n    createPlayerDiv.dialog({\n        width: 1000,\n        height: 700,\n        modal: true\n    });\n\n    saveButton.click(function () {\n        var valid = player.model.isValid();\n        if (!valid) {\n            alert(i18n.tr(\"Введите все обязательные поля\"));\n            return;\n        }\n\n\n        AS.SERVICES.showWaitWindow();\n        player.saveFormData(function (result) {\n            AS.SERVICES.hideWaitWindow();\n            if (_.isUndefined(result)) {\n                alert(i18n.tr(\"Во время сохранения данных по форме произошли ошибки. Обратитесь к администратору\"));\n                return;\n            }\n\n            createPlayerDiv.dialog(\"destroy\");\n\n            AS.FORMS.ApiUtils.getDocumentIdentifier(result, function (documentID) {\n                model.setValue(documentID);\n            });\n        });\n    });\n});\n\n// скрываем или отображаем поля ввода в зависимости от того режим чтения это или редактирования\nif (!editable) {\n    input.hide();\n    addIcon.hide();\n    browseIcon.hide();\n    deleteIcon.hide();\n}\naddIcon.text('+' + i18n.tr('Создать'));\nbrowseIcon.text(i18n.tr('Выбрать из реестра'));\ndeleteIcon.html('<div style=\"color:#606060; margin-left:10px; text-decoration:underline\" ' +\n    'class=\"asf-InlineBlock asf-cursorPointer\" innerId=\"delete\">&#10005;' + i18n.tr('Удалить') + '</div>');\n\n// реализовываем метод обновления отображения согласно изменившимся данным модели\nview.updateValueFromModel = function () {\n    input.val(\"\");\n    if (model.getValue()) {\n        textView.css(\"display\", \"\");\n        input.hide();\n        textView.html(model.getTextValue());\n        input.hide();\n        if (editable) {\n            deleteIcon.css(\"display\", \"\");\n        } else {\n            input.hide();\n            addIcon.hide();\n            browseIcon.hide();\n            deleteIcon.hide();\n        }\n    } else {\n\n        if (editable) {\n            input.css(\"display\", \"\");\n        } else {\n            input.hide();\n            addIcon.hide();\n            browseIcon.hide();\n            deleteIcon.hide();\n        }\n\n        textView.html(\"\");\n        input.text(\"\");\n        deleteIcon.hide();\n    }\n};\n\n// подписываем на событие подгрузки дополнительных данных значения\nmodel.on(AS.FORMS.EVENT_TYPE.dataLoad, function () {\n    view.updateValueFromModel();\n});\n\n\n/**\n * если нет прав создания записи реестра, то кнопки создать не должно быть видно\n */\nfunction validateIconsState() {\n    addIcon.hide();\n    if (registry.rr_create && editable) {\n        addIcon.css(\"display\", \"\");\n    }\n}\n\n/**\n * инициализируем компонент (получаем реестр, колонки)\n */\nfunction initComponent() {\n    AS.FORMS.ApiUtils.simpleAsyncGet('rest/api/registry/info?code=' + model.code, function (reg) {\n        registry = reg;\n\n        registry.registryID = reg.registryID;\n\n        registryColumns = [];\n        registry.columns.forEach(function (col) {\n            if (col.visible != 1) {\n                return;\n            }\n            registryColumns.push(col);\n        });\n\n        registryColumns = registryColumns.sort(function (item1, item2) {\n            var number1 = item1.order;\n            var number2 = item2.order;\n            if (number1 === number2) {\n                if (item1.name < item2.name) {\n                    return -1;\n                } else if (item1.name > item2.name) {\n                    return 1;\n                }\n            } else {\n                if (number1 === 0) {\n                    return 1;\n                } else if (number2 === 0) {\n                    return -1;\n                } else if (number1 < number2) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }\n            return 0;\n        });\n        model.updateTextView();\n        view.updateValueFromModel();\n        validateIconsState();\n    });\n\n}\n\n// при вводе пользователя отображаем первые 10 результатов поиска\ninput.on(\"input\", function () {\n    var search = input.val();\n    if (search.length === 0 || !registry) {\n        AS.SERVICES.showDropDown([]);\n        return;\n    }\n\n    AS.FORMS.ApiUtils.getRegistryData(registry.registryID, 0, 10, search, null, null, function (foundData) {\n        var values = [];\n        foundData.result.forEach(function (record) {\n            var value = {value: record.documentID};\n            var label = \"\";\n\n            registryColumns.forEach(function (column) {\n                if (record.fieldValue[column.columnID] !== undefined) {\n                    label += record.fieldValue[column.columnID] + \" - \";\n                }\n            });\n\n            value.title = label;\n            values.push(value);\n        });\n\n        AS.SERVICES.showDropDown(values, input, null, function (selectedValue) {\n            model.setValue(selectedValue);\n            view.updateValueFromModel();\n        });\n\n    });\n\n});\n\nsetTimeout(function () {\n    initComponent();\n}, 0);\n\nAS.SERVICES.getParameterByName = function(name, url) {\n    if (!url) {\n        url = window.location.href;\n    }\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n};\n\n```",
    "Данный пользовательский компонент расширяет функциональность компонента выбор записи реестра, добавив к нему следующие\nвозможности:\n\n- создание записи реестра;\n- просмотр файла по форме в диалоге;\n- удаление выбранного значения.\n\nНа форме компонент отображается следующим образом:\n\nПользовательский компонентВыбор и создание записи реестра\n\nПользовательский компонентВыбор и создание записи реестра\n\nHtml код компонента содержит следующий код:\n\n```\n<style>\n.edit {\n    border: 1px solid black;\n    float: right;\n    background: url('light/images/buttons/dark.gray/edit.png') 50%;\n    width: 30px;\n    height: 22px;\n    background-repeat: no-repeat;\n    border-radius: 5px;\n    border-color: gray;\n}\n.edited{\n    background-color: #efefef;\n}\n</style>\n\n//ссылка на документ реестра\n<div style=\"text-decoration:underline; cursor:pointer;width:calc(100% ); color:#06f; margin-bottom:2px\"\n     innerId=\"textView\" ></div>\n//поле ввода для поиска записи реестра\n<input type=\"text\" class=\"asf-textBox\" innerId=\"name\" style=\"width:calc(100% )\"/>\n//надпись, по клику на которой откроется диалог с формой для заполнения\n<div style=\"color:#606060; text-decoration:underline\" class=\"asf-InlineBlock asf-cursorPointer\"\n     innerId=\"add\">+Создать</div>\n//надпись, по клику по которой открывается диалог выбора записи реестра\n<div style=\"color:#606060; margin-left:10px; text-decoration:underline\"\n     class=\"asf-InlineBlock asf-cursorPointer\"\n     innerId=\"browse\">Выбрать из реестра</div>\n//надпись для удаления выбранного значения\n<div style=\"color:#606060; margin-left:10px; text-decoration:underline\"\n     class=\"asf-InlineBlock asf-cursorPointer\"\n     innerId=\"delete\">&#10005; Удалить</div>\n\n```\n\nЗначение этого пользовательского компонента будет сохраняться со значениями остальных компонентов, в этом заключается\nотличие от пользовательского компонентаКнопка, который просто выполнял действие по клику.\n\nСпособ хранения выбранного значения, как и поведение всего компонента, описывается скриптом в блоке JAVASCRIPT код.\n\nДанные компонента будут храниться в виде:\n\n```\n{\n    \"id\":\"custom-zthfcc\",\n    \"type\":\"custom\",\n    \"value\":\"Услуга3\",\n    \"key\":\"c38e83a0-c065-4dec-a334-d32e63fcb0b4\"\n}\n\n```\n\nЗдесьid- это идентификатор компонента,type- тип,value- значение,key- ключ компонента\n\nЗа способ хранения данных компонента отвечает следующий кусок кода:\n\n```\n/**\n * метод реализовывает получение данных компонента для хранения\n * @param blockNumber\n * @returns {*}\n */\nmodel.getAsfData = function (blockNumber) {\n    return AS.FORMS.ASFDataUtils.getBaseAsfData(model.asfProperty, blockNumber, model.textValue, model.value);\n};\n\n```\n\nЗдесь в качествеvalueпередаем параметр model.textValue, который обновляется каждый раз при изменении значения компонента:\n\n```\n/**\n * обновить текстовое представление записи реестра\n */\nmodel.updateTextView = function () {\n    if (!model.getValue()) {\n        model.textValue = \"\";\n        model.asfDataId = null;\n        model.trigger(AS.FORMS.EVENT_TYPE.dataLoad, [model]);\n        return;\n    }\n    AS.FORMS.ApiUtils.getAsfDataUUID(model.getValue(), function (newAsfDataId) {\n        model.asfDataId = newAsfDataId;\n        if(!registry) return;\n        AS.FORMS.ApiUtils.getDocMeaningContent(registry.registryID, newAsfDataId, function (text) {\n            if (text === null || text === '') {\n                model.textValue = i18n.tr('Документ');\n            } else {\n                model.textValue = text;\n            }\n            model.trigger(AS.FORMS.EVENT_TYPE.dataLoad, [model]);\n        });\n    });\n};\n\n```\n\nПереопределяем методsetAsfDataмодели, в данном случае в качестве значения выступаетkey(ид документа выбранной записи).\n\n```\nsetAsfData\n```\n\n```\nkey\n```\n\n```\n/**\n * метод реализовывает вставку asfData\n * @param asfData\n */\nmodel.setAsfData = function (asfData) {\n    model.setValue(asfData.key);\n};\n\n```\n\nВ скрипте компонента на форме необходимо прописать код реестра, записи которого будут выбраны либо созданы.\nЭто указывается следующим образом:\n\nСкрипт компонента на форме\n\nСкрипт компонента на форме\n\nВ результате получим следующий компонент:\n\nПолный javascript код компонента с комментариями:\n\n```\n/**\n * обновить текстовое представление записи реестра\n */\nmodel.updateTextView = function () {\n    if (!model.getValue()) {\n        model.textValue = \"\";\n        model.asfDataId = null;\n        model.trigger(AS.FORMS.EVENT_TYPE.dataLoad, [model]);\n        return;\n    }\n    AS.FORMS.ApiUtils.getAsfDataUUID(model.getValue(), function (newAsfDataId) {\n        model.asfDataId = newAsfDataId;\n        AS.FORMS.ApiUtils.getDocMeaningContent(registry.registryID, newAsfDataId, function (text) {\n            if (text === null || text === '') {\n                model.textValue = i18n.tr('Документ');\n            } else {\n                model.textValue = text;\n            }\n            model.trigger(AS.FORMS.EVENT_TYPE.dataLoad, [model]);\n        });\n    });\n};\n\n/**\n * получить тесктовое представление записи реестра\n * @returns {string|string|*}\n */\nmodel.getTextValue = function () {\n    return model.textValue;\n};\n\n// подписываемся на событие модели об изменении содержания, чтобы подгрузить дополнительные данные\nmodel.on(AS.FORMS.EVENT_TYPE.valueChange, function () {\n    model.updateTextView();\n});\n\n/**\n * метод реализовывает вставку asfData\n * @param asfData\n */\nmodel.setAsfData = function (asfData) {\n    model.setValue(asfData.key);\n};\n\n/**\n * метод реализовывает получение данных компонента для хранения\n * @param blockNumber\n * @returns {*}\n */\nmodel.getAsfData = function (blockNumber) {\n    return AS.FORMS.ASFDataUtils.getBaseAsfData(model.asfProperty, blockNumber, model.textValue, model.value);\n};\n\n\n/* инициализация отображения */\n\n\n/**\n * реестр\n * @type {object}\n */\nvar registry = null;\n/**\n * видимые колонки реестра\n * @type {Array}\n */\nvar registryColumns = [];\n\n\n/**\n * поле ввода для поиска записей реестра\n * @type {XMLList|*}\n */\nvar input = jQuery(view.container).children(\"[innerId='name']\");\n/**\n * поле для отображения выбранной записи реестра\n * @type {XMLList|*}\n */\nvar textView = jQuery(view.container).children(\"[innerId='textView']\");\n/**\n * кнопка добавления записи\n * @type {XMLList|*}\n */\nvar addIcon = jQuery(view.container).children(\"[innerId='add']\");\n/**\n * кнопка выбора записи из реестра\n * @type {XMLList|*}\n */\nvar browseIcon = jQuery(view.container).children(\"[innerId='browse']\");\n/**\n * кнопка удаления текущей выбранной записи\n * @type {XMLList|*}\n */\nvar deleteIcon = jQuery(view.container).children(\"[innerId='delete']\");\n\n// кнопку удаления текущей выбраннйо записи скрываем\ndeleteIcon.hide();\n\n// по нажатию на кнопку \"выбрать из реестра\" открываем стандартный диалог выбра записи реестра\nbrowseIcon.click(function () {\n    AS.SERVICES.showRegisterLinkDialog(registry, function (documentId) {\n        model.setValue(documentId);\n    });\n});\n\n// по нажатию на кнопку \"создать\" открываем форму создания записи реестра\naddIcon.click(function () {\n    if (!registry.rr_create) {\n        alert(\"У вас нет прав на создание записей данного реестра\");\n        return;\n    }\n\n    var createPlayerDiv = jQuery(\"<div>\");\n    createPlayerDiv.css(\"width\", \"1000px\");\n    createPlayerDiv.css(\"height\", \"700px\");\n\n    createPlayerDiv.css(\"border\", \"1px solid #afafaf\");\n\n    var saveButton = jQuery(\"<button>\", {class: \"ns-approveButton ns-basicChooserApplyButton\"});\n    saveButton.button();\n    saveButton.html(i18n.tr(\"Создать\"));\n    saveButton.css(\"margin\", \"auto\");\n    saveButton.css(\"display\", \"block\");\n    saveButton.css(\"margin-top\", \"10px\");\n    saveButton.css(\"margin-bottom\", \"10px\");\n\n    var player = AS.FORMS.createPlayer();\n\n    player.view.setEditable(true);\n    player.showFormData(registry.formId);\n    player.view.appendTo(createPlayerDiv);\n\n    player.model.on(AS.FORMS.EVENT_TYPE.dataLoad, function () {\n        console.log(player.model);\n        var registryModel = null;\n        if (player.model.formCode === 'crm_form_contact') {\n            registryModel = player.model.getModelWithId('crm_form_contact_lead_lead', 'crm_form_contact_lead');\n        }\n        if (player.model.formCode === 'crm_form_account') {\n            registryModel = player.model.getModelWithId('crm_form_account_lead_lead', 'crm_form_account_lead');\n        }\n        if (player.model.formCode === 'crm_form_dealActivity') {\n            registryModel = player.model.getModelWithId('crm_form_dealActivity_main_deal');\n        }\n        if (player.model.formCode === 'crm_form_leadActivity') {\n            registryModel = player.model.getModelWithId('crm_form_leadActivity_main_lead');\n        }\n        if (registryModel != null) {\n            registryModel.setValue(AS.SERVICES.getParameterByName(\"document_identifier\", window.location.href));\n        }\n    });\n\n    createPlayerDiv.append(saveButton);\n\n\n    createPlayerDiv.dialog({\n        width: 1000,\n        height: 700,\n        modal: true\n    });\n\n\n    saveButton.click(function () {\n        var valid = player.model.isValid();\n        if (!valid) {\n            alert(i18n.tr(\"Введите все обязательные поля\"));\n            return;\n        }\n\n        AS.SERVICES.showWaitWindow();\n        AS.FORMS.ApiUtils.simpleAsyncGet(\"rest/api/registry/create_doc?registryID=\" + registry.registryID, function (result) {\n            if (result.errorCode != 0) {\n                AS.SERVICES.hideWaitWindow();\n                alert(i18n.tr(\"Во время сохранения данных по форме произошли ошибки. Обратитесь к администратору\"));\n                return;\n            }\n            player.model.asfDataId = result.dataUUID;\n            player.saveFormData(function (result) {\n                AS.SERVICES.hideWaitWindow();\n                if (_.isUndefined(result)) {\n                    alert(i18n.tr(\"Во время сохранения данных по форме произошли ошибки. Обратитесь к администратору\"));\n                    return;\n                };\n\n\n                createPlayerDiv.dialog(\"destroy\");\n\n                AS.FORMS.ApiUtils.getDocumentIdentifier(result, function (documentID) {\n                    /*в качестве значения компонента указываем ид созданного документа*/\n                    model.setValue(documentID);\n                });\n\n            });\n        });\n\n    });\n\n\n});\n\n\n// по нажатию на кнопку удалить  - удаляем выбранное значение\ndeleteIcon.click(function(){\n    model.setValue(null);\n});\n\n\n// по нажатию на текстовое отображение  - открываем запись реестра на просмотр\ntextView.click(function () {\n    var createPlayerDiv = jQuery(\"<div>\");\n    createPlayerDiv.css(\"width\", \"1000px\");\n    createPlayerDiv.css(\"height\", \"700px\");\n\n    var editButton = jQuery('<div class=\"edit\"></div>');\n\n    var saveButton = jQuery(\"<button>\", {class: \"ns-approveButton ns-basicChooserApplyButton\"});\n    saveButton.button();\n    saveButton.html(i18n.tr(\"Сохранить\"));\n    saveButton.css(\"margin\", \"auto\");\n    saveButton.css(\"display\", \"block\");\n    saveButton.css(\"margin-top\", \"10px\");\n    saveButton.css(\"margin-bottom\", \"10px\");\n\n    if (registry.code == 'crm_registry_leadActivities' || registry.code == 'crm_registry_dealActivities') {\n        createPlayerDiv.append(editButton);\n\n        editButton.click(function () {\n            if (player.view.editable) {\n                player.view.setEditable(false);\n                editButton.removeClass('edited');\n                saveButton.hide();\n            } else {\n                player.view.setEditable(true);\n                editButton.addClass('edited');\n                saveButton.show();\n            }\n        });\n    }\n\n    createPlayerDiv.css(\"border\", \"1px solid #afafaf\");\n\n    var player = AS.FORMS.createPlayer();\n\n    player.view.setEditable(false);\n    player.showFormData(null, null, model.asfDataId, 0);\n    player.view.appendTo(createPlayerDiv);\n    createPlayerDiv.append(saveButton);\n    saveButton.hide();\n\n    createPlayerDiv.dialog({\n        width: 1000,\n        height: 700,\n        modal: true\n    });\n\n    saveButton.click(function () {\n        var valid = player.model.isValid();\n        if (!valid) {\n            alert(i18n.tr(\"Введите все обязательные поля\"));\n            return;\n        }\n\n\n        AS.SERVICES.showWaitWindow();\n        player.saveFormData(function (result) {\n            AS.SERVICES.hideWaitWindow();\n            if (_.isUndefined(result)) {\n                alert(i18n.tr(\"Во время сохранения данных по форме произошли ошибки. Обратитесь к администратору\"));\n                return;\n            }\n\n            createPlayerDiv.dialog(\"destroy\");\n\n            AS.FORMS.ApiUtils.getDocumentIdentifier(result, function (documentID) {\n                model.setValue(documentID);\n            });\n        });\n    });\n});\n\n// скрываем или отображаем поля ввода в зависимости от того режим чтения это или редактирования\nif (!editable) {\n    input.hide();\n    addIcon.hide();\n    browseIcon.hide();\n    deleteIcon.hide();\n}\naddIcon.text('+' + i18n.tr('Создать'));\nbrowseIcon.text(i18n.tr('Выбрать из реестра'));\ndeleteIcon.html('<div style=\"color:#606060; margin-left:10px; text-decoration:underline\" ' +\n    'class=\"asf-InlineBlock asf-cursorPointer\" innerId=\"delete\">&#10005;' + i18n.tr('Удалить') + '</div>');\n\n// реализовываем метод обновления отображения согласно изменившимся данным модели\nview.updateValueFromModel = function () {\n    input.val(\"\");\n    if (model.getValue()) {\n        textView.css(\"display\", \"\");\n        input.hide();\n        textView.html(model.getTextValue());\n        input.hide();\n        if (editable) {\n            deleteIcon.css(\"display\", \"\");\n        } else {\n            input.hide();\n            addIcon.hide();\n            browseIcon.hide();\n            deleteIcon.hide();\n        }\n    } else {\n\n        if (editable) {\n            input.css(\"display\", \"\");\n        } else {\n            input.hide();\n            addIcon.hide();\n            browseIcon.hide();\n            deleteIcon.hide();\n        }\n\n        textView.html(\"\");\n        input.text(\"\");\n        deleteIcon.hide();\n    }\n};\n\n// подписываем на событие подгрузки дополнительных данных значения\nmodel.on(AS.FORMS.EVENT_TYPE.dataLoad, function () {\n    view.updateValueFromModel();\n});\n\n\n/**\n * если нет прав создания записи реестра, то кнопки создать не должно быть видно\n */\nfunction validateIconsState() {\n    addIcon.hide();\n    if (registry.rr_create && editable) {\n        addIcon.css(\"display\", \"\");\n    }\n}\n\n/**\n * инициализируем компонент (получаем реестр, колонки)\n */\nfunction initComponent() {\n    AS.FORMS.ApiUtils.simpleAsyncGet('rest/api/registry/info?code=' + model.code, function (reg) {\n        registry = reg;\n\n        registry.registryID = reg.registryID;\n\n        registryColumns = [];\n        registry.columns.forEach(function (col) {\n            if (col.visible != 1) {\n                return;\n            }\n            registryColumns.push(col);\n        });\n\n        registryColumns = registryColumns.sort(function (item1, item2) {\n            var number1 = item1.order;\n            var number2 = item2.order;\n            if (number1 === number2) {\n                if (item1.name < item2.name) {\n                    return -1;\n                } else if (item1.name > item2.name) {\n                    return 1;\n                }\n            } else {\n                if (number1 === 0) {\n                    return 1;\n                } else if (number2 === 0) {\n                    return -1;\n                } else if (number1 < number2) {\n                    return -1;\n                } else {\n                    return 1;\n                }\n            }\n            return 0;\n        });\n        model.updateTextView();\n        view.updateValueFromModel();\n        validateIconsState();\n    });\n\n}\n\n// при вводе пользователя отображаем первые 10 результатов поиска\ninput.on(\"input\", function () {\n    var search = input.val();\n    if (search.length === 0 || !registry) {\n        AS.SERVICES.showDropDown([]);\n        return;\n    }\n\n    AS.FORMS.ApiUtils.getRegistryData(registry.registryID, 0, 10, search, null, null, function (foundData) {\n        var values = [];\n        foundData.result.forEach(function (record) {\n            var value = {value: record.documentID};\n            var label = \"\";\n\n            registryColumns.forEach(function (column) {\n                if (record.fieldValue[column.columnID] !== undefined) {\n                    label += record.fieldValue[column.columnID] + \" - \";\n                }\n            });\n\n            value.title = label;\n            values.push(value);\n        });\n\n        AS.SERVICES.showDropDown(values, input, null, function (selectedValue) {\n            model.setValue(selectedValue);\n            view.updateValueFromModel();\n        });\n\n    });\n\n});\n\nsetTimeout(function () {\n    initComponent();\n}, 0);\n\nAS.SERVICES.getParameterByName = function(name, url) {\n    if (!url) {\n        url = window.location.href;\n    }\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n};\n\n```",
    "Особенность этого пользовательского компонента заключается в использовании внешних js библиотек.\n\nНо основе данных, получаемых по специальному апи, необходимо построить воронку следующего вида:\n\nДля компонента используется библиотекаd3-funnel\n\nHtml код компонента содержит сдедующий код:\n\n```\n<style>\n.chart {\n    margin: 0 auto;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    height: 500px;\n    width: 450px;\n}\n</style>\n<!-- Funnel container -->\n<div class=\"chart\" id=\"funnel\"></div>\n\n```\n\nJavascript код:\n\n```\n/* global D3Funnel */\nconst data = {\n    normal: [\n       ['Первичная регистрация', [0, ''], '#e73a00'],\n        ['Квалификация', [0, ''], '#fa6c00'],\n        ['Взращивание', [0, ''], '#ffa900'],\n        ['Подтверждение интереса', [0, ''], '#ffc500'],\n        ['В сделку', [0, ''], '#a6cf00'],\n    ]\n};\n/*параметры воронки*/\nconst options = {\n            chart: {\n                width: 450,\n                height: 500,\n                bottomWidth: 1 / 2,\n                curve: {\n                    enabled: false,\n                },\n            },\n            block: {\n                dynamicHeight: true,\n                highlight: true,\n                minHeight: 40,\n\n            },\n            label: {\n                format: '{l}: {v}\\n{f}',\n            },\n            events: {\n                click: {\n                    block: (d) => {\n                    alert('<' + d.label.raw + '> selected.');\n},},}}\n\nconst chart = new D3Funnel('#funnel');\nchart.draw(data.normal, options);\n\n```\n\nЧтобы отобразить воронку для константных данных, можете поместить компонент на форму и прописать в скрипте следующий код:\n\n```\nsetTimeout(function() {\n  const data = {\n            normal: [\n                ['Первичная регистрация', [20, ''], '#e73a00'],\n                ['Квалификация', [15, ''], '#fa6c00'],\n                ['Взращивание', [8, ''], '#ffa900'],\n                ['Подтверждение интереса', [7, ''], '#ffc500'],\n                ['В сделку', [5, ''], '#a6cf00'],\n            ]\n        };\n    const options = {\n        chart: {\n            width: 450,\n            height: 500,\n            bottomWidth: 1 / 2,\n            curve: {\n                enabled: false,\n            },\n        },\n        block: {\n            dynamicHeight: false,\n            highlight: true,\n            minHeight: 40,\n            },\n        label: {\n            format: '{l}\\n{v} {f}',\n        }\n    };\n\n    const chart = new D3Funnel('#funnel');\n    chart.draw(data.normal, options);\n}, 5);\n\n```\n\nВоронка не будет отображена до тех пор, пока на страницу не будет загружен скрипт d3-funnel.\nДля подключения библиотеки можно прописать на странице html, куда будет помещен проигрыватель, следующее:\n\n```\n<!-- Required D3 library -->\n<script src=\"d3/dist/d3.v4.js\"></script>\n<!-- D3Funnel source file -->\n<script src=\"d3/dist/d3-funnel.js\"></script>\n\n```\n\nВ текущем случае мы отображаем форму в проигрывателе Synergy, поэтому, чтобы не править страницу Synergy.html, можно\nподгрузить скрипт с помощью пользовательского компонента и ВМК.\n\nДля этого создаем пользовательский компонент с кодом и названием d3funnel, html код оставляем пустым, в javascript код\nпишем следующее:\n\n```\njQuery.loadScript = function (url, callback) {\n    jQuery.ajax({\n        url: url,\n        dataType: 'script',\n        success: callback,\n        async: true\n    });\n}\n\n$.loadScript('https://d3js.org/d3.v4.min.js', function(){\n    $.loadScript('https://cdn.rawgit.com/jakezatecky/d3-funnel/v1.0.0/dist/d3-funnel.js', function(){\n        console.log('d3funnel loaded');\n    });\n});\n\n```\n\nСоздаем ВМК d3funnel для размещения копмонента на странице Synergy onLoad:\n\nПосле можем открыть данные по форме с компонентомВоронка продаж, в результате воронка будет иметь вид:\n\nРассмотрим случай, когда данные воронки будут получены по специальному апи, и отрисовка будет производиться\nпо изменению значений компонентов на форме.\n\nВ этом случае форма с воронкой используется во внешнем модуле, у которого на странице html встроен проигрыватель форм.\nСсылки на скрипты d3-funnel будут прописаны на html странице этого модуля:\n\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n\n    <script>\n        FORM_PLAYER_URL_PREFIX = window.location.protocol + \"//\" + window.location.host + \"/Synergy/\";\n    </script>\n\n    <script src=\"scripts.js\" type=\"text/javascript\"></script>\n\n    <!-- Required D3 library -->\n    <script src=\"d3/dist/d3.v4.js\"></script>\n\n    <!-- D3Funnel source file -->\n    <script src=\"d3/dist/d3-funnel.js\"></script>\n    <script src=\"redips-drag-min.js\"></script>\n\n    <link href=\"index.css\" rel=\"stylesheet\"/>\n</head>\n\n<body>\n<div width=\"100%\" height=\"100%\" id=\"mngmnt_wait_div\" style=\"position: absolute; left: 0px; top: 0px; width: 0px; height: 0px; visibility: hidden; z-index: 1000;\">\n    <table border=\"0\" width=\"100%\" height=\"100%\">\n        <tbody><tr>\n            <td align=\"center\" valign=\"middle\" id=\"ww\"><img src=\"images/wait.gif\"></td>\n        </tr>\n        </tbody></table>\n</div>\n<div style=\"z-index: 0\" class=\"portal-center\">\n    <div id=\"form_player_container\">\n\n\n        <div id=\"form_player_div\" >\n\n        </div>\n    </div>\n</div>\n\n<div id=\"message\" class=\"hidden\">\n    <span id=\"message_text\"></span>\n</div>\n\n</body>\n</html>\n\n```\n\nПомещаем компонент на форму:\n\nВ скрипте компонента на форме прописываем основную логику: получение данных для формирования воронки,\nфункцию отрисовки воронки.\n\n```\n/*установливаем ширину*/\nvar width = $(window).width() - 325;\n$(view.container[0]).css('width', (width) + 'px');\n\n/*идентификаторы компонентов, значения которых участивуют в формировании параметров для получения данных воронки*/\nvar crm_form_funnel_events = 'crm_form_funnel_events';\nvar crm_form_funnel_show_free_leads = 'crm_form_funnel_show_free_leads';\nvar crm_form_funnel_users = 'crm_form_funnel_users';\nvar crm_form_funnel_period = 'crm_form_funnel_period';\nvar crm_form_funnel_start_date = 'crm_form_funnel_start_date';\nvar crm_form_funnel_finish_date = 'crm_form_funnel_finish_date';\nvar crm_form_funnel_status = 'crm_form_funnel_status';\nvar crm_form_funnel_cost = 'crm_form_funnel_cost';\nvar crm_form_funnel_comission = 'crm_form_funnel_comission';\n\nmodel.playerModel.isFunnel = false;\nview.setVisible(false);\nmodel.playerModel.firstShow = true;\n\n/* определяем функцию перерисовки воронки;\n   функция используется в скриптах компонентов, идентификаторы которых определены выше,\n   в событии изменения значения\n  */\nmodel.playerModel.redraw = function (modeChange) {\n    if (model.playerModel.firstShow) {\n        return;\n    }\n\n    if (!model.playerModel.invisible) {\n        width = $(window).width();\n    } else {\n        width = $(window).width() - 325\n    }\n    $(view.container[0]).css('width', (width) + 'px');\n\n    var events = model.playerModel.getModelWithId(crm_form_funnel_events);\n    var showFreeLeads = model.playerModel.getModelWithId(crm_form_funnel_show_free_leads);\n    var users = model.playerModel.getModelWithId(crm_form_funnel_users);\n    var periodType = model.playerModel.getModelWithId(crm_form_funnel_period);\n    var startDate = model.playerModel.getModelWithId(crm_form_funnel_start_date);\n    var finishDate = model.playerModel.getModelWithId(crm_form_funnel_finish_date);\n    var status = model.playerModel.getModelWithId(crm_form_funnel_status);\n\n    /*форморирование запроса для получения данных воронки*/\n    var factUrl = window.location.origin + \"/crm/rest/api/funnel/getData\";\n    var params = {\n        events: events.getValue(),\n        users: users.getKey(),\n        periodType: periodType.getValue()[0],\n        startDate: startDate.getValue(),\n        finishDate: finishDate.getValue(),\n        status: status.getValue()[0],\n        locale: AS.OPTIONS.locale\n    };\n    if (periodType.getValue()[0] === 'custom' && (startDate.getValue() === null || finishDate.getValue() === null )) {\n        return;\n    }\n    params.showFreeLeads = showFreeLeads.getValue() !== null;\n    params.loadLeads = !model.playerModel.isFunnel;\n    AS.SERVICES.showWaitWindow();\n    /*отправка запроса*/\n    var pFact = jQuery.ajax({\n        url: factUrl,\n        type: \"POST\",\n        beforeSend: AS.FORMS.ApiUtils.addAuthHeader,\n        data: params,\n        dataType: \"text\"\n    });\n\n    jQuery.when(pFact).then(function (data) {\n        if (model.playerModel.isFunnel) {\n            model.playerModel.drawFunnel(JSON.parse(data));\n            model.playerModel.canbanDrawn = false;\n            model.playerModel.funnelDrawn = true;\n        } else {\n            model.playerModel.drawCanban(JSON.parse(data));\n            model.playerModel.funnelDrawn = false;\n            model.playerModel.canbanDrawn = true;\n        }\n\n        AS.SERVICES.hideWaitWindow();\n    });\n};\n\n/*отрисовка воронки на основе переданных данных data*/\nmodel.playerModel.drawFunnel = function(data) {\n    view.playerView.calcDim();\n    var v = [];\n    /* global D3Funnel */\n    var budget = 0;\n    var commission = 0;\n    data.forEach(function (object) {\n        var t = [];\n        t.push(object.name);\n        var tt = [];\n        tt.push((object.count + \"\").replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 '));\n        tt.push(object.percent);\n        t.push(tt);\n        t.push(object.color);\n        v.push(t);\n        budget = budget + object.budget;\n        commission = commission + object.commission;\n    });\n\n    view.playerView.getViewWithId(crm_form_funnel_cost).container.children()[0].textContent = (budget + \"\").replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n    view.playerView.getViewWithId(crm_form_funnel_comission).container.children()[0].textContent = (Math.round(commission) + \"\").replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n    const options = {\n        chart: {\n            width: 450,\n            height: 500,\n            bottomWidth: 1 / 2,\n            curve: {\n                enabled: false,\n            },\n        },\n        block: {\n            dynamicHeight: false,\n            highlight: true,\n            minHeight: 40,\n\n        },\n        label: {\n            format: '{l}\\n{v} {f}',\n        }\n    }\n}\n\n    const chart = new D3Funnel('#funnel');\n    chart.draw(v, options);\n};\n\n```\n\nВ итоге получается следующая форма, которую можно отобразить во вшешнем модуле:",
    "Особенность этого пользовательского компонента заключается в использовании внешних js библиотек.\n\nНо основе данных, получаемых по специальному апи, необходимо построить воронку следующего вида:\n\nДля компонента используется библиотекаd3-funnel\n\nHtml код компонента содержит сдедующий код:\n\n```\n<style>\n.chart {\n    margin: 0 auto;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    height: 500px;\n    width: 450px;\n}\n</style>\n<!-- Funnel container -->\n<div class=\"chart\" id=\"funnel\"></div>\n\n```\n\nJavascript код:\n\n```\n/* global D3Funnel */\nconst data = {\n    normal: [\n       ['Первичная регистрация', [0, ''], '#e73a00'],\n        ['Квалификация', [0, ''], '#fa6c00'],\n        ['Взращивание', [0, ''], '#ffa900'],\n        ['Подтверждение интереса', [0, ''], '#ffc500'],\n        ['В сделку', [0, ''], '#a6cf00'],\n    ]\n};\n/*параметры воронки*/\nconst options = {\n            chart: {\n                width: 450,\n                height: 500,\n                bottomWidth: 1 / 2,\n                curve: {\n                    enabled: false,\n                },\n            },\n            block: {\n                dynamicHeight: true,\n                highlight: true,\n                minHeight: 40,\n\n            },\n            label: {\n                format: '{l}: {v}\\n{f}',\n            },\n            events: {\n                click: {\n                    block: (d) => {\n                    alert('<' + d.label.raw + '> selected.');\n},},}}\n\nconst chart = new D3Funnel('#funnel');\nchart.draw(data.normal, options);\n\n```\n\nЧтобы отобразить воронку для константных данных, можете поместить компонент на форму и прописать в скрипте следующий код:\n\n```\nsetTimeout(function() {\n  const data = {\n            normal: [\n                ['Первичная регистрация', [20, ''], '#e73a00'],\n                ['Квалификация', [15, ''], '#fa6c00'],\n                ['Взращивание', [8, ''], '#ffa900'],\n                ['Подтверждение интереса', [7, ''], '#ffc500'],\n                ['В сделку', [5, ''], '#a6cf00'],\n            ]\n        };\n    const options = {\n        chart: {\n            width: 450,\n            height: 500,\n            bottomWidth: 1 / 2,\n            curve: {\n                enabled: false,\n            },\n        },\n        block: {\n            dynamicHeight: false,\n            highlight: true,\n            minHeight: 40,\n            },\n        label: {\n            format: '{l}\\n{v} {f}',\n        }\n    };\n\n    const chart = new D3Funnel('#funnel');\n    chart.draw(data.normal, options);\n}, 5);\n\n```\n\nВоронка не будет отображена до тех пор, пока на страницу не будет загружен скрипт d3-funnel.\nДля подключения библиотеки можно прописать на странице html, куда будет помещен проигрыватель, следующее:\n\n```\n<!-- Required D3 library -->\n<script src=\"d3/dist/d3.v4.js\"></script>\n<!-- D3Funnel source file -->\n<script src=\"d3/dist/d3-funnel.js\"></script>\n\n```\n\nВ текущем случае мы отображаем форму в проигрывателе Synergy, поэтому, чтобы не править страницу Synergy.html, можно\nподгрузить скрипт с помощью пользовательского компонента и ВМК.\n\nДля этого создаем пользовательский компонент с кодом и названием d3funnel, html код оставляем пустым, в javascript код\nпишем следующее:\n\n```\njQuery.loadScript = function (url, callback) {\n    jQuery.ajax({\n        url: url,\n        dataType: 'script',\n        success: callback,\n        async: true\n    });\n}\n\n$.loadScript('https://d3js.org/d3.v4.min.js', function(){\n    $.loadScript('https://cdn.rawgit.com/jakezatecky/d3-funnel/v1.0.0/dist/d3-funnel.js', function(){\n        console.log('d3funnel loaded');\n    });\n});\n\n```\n\nСоздаем ВМК d3funnel для размещения копмонента на странице Synergy onLoad:\n\nПосле можем открыть данные по форме с компонентомВоронка продаж, в результате воронка будет иметь вид:\n\nРассмотрим случай, когда данные воронки будут получены по специальному апи, и отрисовка будет производиться\nпо изменению значений компонентов на форме.\n\nВ этом случае форма с воронкой используется во внешнем модуле, у которого на странице html встроен проигрыватель форм.\nСсылки на скрипты d3-funnel будут прописаны на html странице этого модуля:\n\n```\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n\n    <script>\n        FORM_PLAYER_URL_PREFIX = window.location.protocol + \"//\" + window.location.host + \"/Synergy/\";\n    </script>\n\n    <script src=\"scripts.js\" type=\"text/javascript\"></script>\n\n    <!-- Required D3 library -->\n    <script src=\"d3/dist/d3.v4.js\"></script>\n\n    <!-- D3Funnel source file -->\n    <script src=\"d3/dist/d3-funnel.js\"></script>\n    <script src=\"redips-drag-min.js\"></script>\n\n    <link href=\"index.css\" rel=\"stylesheet\"/>\n</head>\n\n<body>\n<div width=\"100%\" height=\"100%\" id=\"mngmnt_wait_div\" style=\"position: absolute; left: 0px; top: 0px; width: 0px; height: 0px; visibility: hidden; z-index: 1000;\">\n    <table border=\"0\" width=\"100%\" height=\"100%\">\n        <tbody><tr>\n            <td align=\"center\" valign=\"middle\" id=\"ww\"><img src=\"images/wait.gif\"></td>\n        </tr>\n        </tbody></table>\n</div>\n<div style=\"z-index: 0\" class=\"portal-center\">\n    <div id=\"form_player_container\">\n\n\n        <div id=\"form_player_div\" >\n\n        </div>\n    </div>\n</div>\n\n<div id=\"message\" class=\"hidden\">\n    <span id=\"message_text\"></span>\n</div>\n\n</body>\n</html>\n\n```\n\nПомещаем компонент на форму:\n\nВ скрипте компонента на форме прописываем основную логику: получение данных для формирования воронки,\nфункцию отрисовки воронки.\n\n```\n/*установливаем ширину*/\nvar width = $(window).width() - 325;\n$(view.container[0]).css('width', (width) + 'px');\n\n/*идентификаторы компонентов, значения которых участивуют в формировании параметров для получения данных воронки*/\nvar crm_form_funnel_events = 'crm_form_funnel_events';\nvar crm_form_funnel_show_free_leads = 'crm_form_funnel_show_free_leads';\nvar crm_form_funnel_users = 'crm_form_funnel_users';\nvar crm_form_funnel_period = 'crm_form_funnel_period';\nvar crm_form_funnel_start_date = 'crm_form_funnel_start_date';\nvar crm_form_funnel_finish_date = 'crm_form_funnel_finish_date';\nvar crm_form_funnel_status = 'crm_form_funnel_status';\nvar crm_form_funnel_cost = 'crm_form_funnel_cost';\nvar crm_form_funnel_comission = 'crm_form_funnel_comission';\n\nmodel.playerModel.isFunnel = false;\nview.setVisible(false);\nmodel.playerModel.firstShow = true;\n\n/* определяем функцию перерисовки воронки;\n   функция используется в скриптах компонентов, идентификаторы которых определены выше,\n   в событии изменения значения\n  */\nmodel.playerModel.redraw = function (modeChange) {\n    if (model.playerModel.firstShow) {\n        return;\n    }\n\n    if (!model.playerModel.invisible) {\n        width = $(window).width();\n    } else {\n        width = $(window).width() - 325\n    }\n    $(view.container[0]).css('width', (width) + 'px');\n\n    var events = model.playerModel.getModelWithId(crm_form_funnel_events);\n    var showFreeLeads = model.playerModel.getModelWithId(crm_form_funnel_show_free_leads);\n    var users = model.playerModel.getModelWithId(crm_form_funnel_users);\n    var periodType = model.playerModel.getModelWithId(crm_form_funnel_period);\n    var startDate = model.playerModel.getModelWithId(crm_form_funnel_start_date);\n    var finishDate = model.playerModel.getModelWithId(crm_form_funnel_finish_date);\n    var status = model.playerModel.getModelWithId(crm_form_funnel_status);\n\n    /*форморирование запроса для получения данных воронки*/\n    var factUrl = window.location.origin + \"/crm/rest/api/funnel/getData\";\n    var params = {\n        events: events.getValue(),\n        users: users.getKey(),\n        periodType: periodType.getValue()[0],\n        startDate: startDate.getValue(),\n        finishDate: finishDate.getValue(),\n        status: status.getValue()[0],\n        locale: AS.OPTIONS.locale\n    };\n    if (periodType.getValue()[0] === 'custom' && (startDate.getValue() === null || finishDate.getValue() === null )) {\n        return;\n    }\n    params.showFreeLeads = showFreeLeads.getValue() !== null;\n    params.loadLeads = !model.playerModel.isFunnel;\n    AS.SERVICES.showWaitWindow();\n    /*отправка запроса*/\n    var pFact = jQuery.ajax({\n        url: factUrl,\n        type: \"POST\",\n        beforeSend: AS.FORMS.ApiUtils.addAuthHeader,\n        data: params,\n        dataType: \"text\"\n    });\n\n    jQuery.when(pFact).then(function (data) {\n        if (model.playerModel.isFunnel) {\n            model.playerModel.drawFunnel(JSON.parse(data));\n            model.playerModel.canbanDrawn = false;\n            model.playerModel.funnelDrawn = true;\n        } else {\n            model.playerModel.drawCanban(JSON.parse(data));\n            model.playerModel.funnelDrawn = false;\n            model.playerModel.canbanDrawn = true;\n        }\n\n        AS.SERVICES.hideWaitWindow();\n    });\n};\n\n/*отрисовка воронки на основе переданных данных data*/\nmodel.playerModel.drawFunnel = function(data) {\n    view.playerView.calcDim();\n    var v = [];\n    /* global D3Funnel */\n    var budget = 0;\n    var commission = 0;\n    data.forEach(function (object) {\n        var t = [];\n        t.push(object.name);\n        var tt = [];\n        tt.push((object.count + \"\").replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 '));\n        tt.push(object.percent);\n        t.push(tt);\n        t.push(object.color);\n        v.push(t);\n        budget = budget + object.budget;\n        commission = commission + object.commission;\n    });\n\n    view.playerView.getViewWithId(crm_form_funnel_cost).container.children()[0].textContent = (budget + \"\").replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n    view.playerView.getViewWithId(crm_form_funnel_comission).container.children()[0].textContent = (Math.round(commission) + \"\").replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n    const options = {\n        chart: {\n            width: 450,\n            height: 500,\n            bottomWidth: 1 / 2,\n            curve: {\n                enabled: false,\n            },\n        },\n        block: {\n            dynamicHeight: false,\n            highlight: true,\n            minHeight: 40,\n\n        },\n        label: {\n            format: '{l}\\n{v} {f}',\n        }\n    }\n}\n\n    const chart = new D3Funnel('#funnel');\n    chart.draw(v, options);\n};\n\n```\n\nВ итоге получается следующая форма, которую можно отобразить во вшешнем модуле:",
    "3.5.1. Параметры приложения3.5.2. Проигрыватель3.5.3. Компоненты3.5.3.1. Базовые3.5.3.2. «Страница» и «Таблица»3.5.3.3. «Неизменяемый текст»3.5.3.4. «Однострочное поле»3.5.3.5. «Числовое поле»3.5.3.6. «Многострочный текст»3.5.3.7. «HTD-редактор»3.5.3.8. «Выпадающий список»3.5.3.9. «Дата/время»3.5.3.10. «Выбор вариантов»3.5.3.11. «Переключатель вариантов»3.5.3.12. «Изображение»3.5.3.13. «Файл»3.5.3.14. «Ссылка»3.5.3.15. «Объекты Synergy»3.5.3.16. «Счетчик»3.5.3.17. «Лист подписей»3.5.3.18. «Лист резолюций»3.5.3.19. «Ход выполнения»3.5.3.20. «Ссылка на документ»3.5.3.21. «Период повторения»3.5.3.22. «Ссылка на проект/портфель»3.5.3.23. «Ссылка на реестр»3.5.3.24. «Ссылка на адресную книгу»3.5.3.25. «Свойства документа»3.5.3.26. «Ссылка на файл в хранилище»3.5.4. Сервисы3.5.5. Утилиты3.5.5.1. AS.FORMS.ApiUtils3.5.6. Логгер\n\n3.5.1. Параметры приложения\n\n3.5.2. Проигрыватель\n\n3.5.3. Компоненты3.5.3.1. Базовые3.5.3.2. «Страница» и «Таблица»3.5.3.3. «Неизменяемый текст»3.5.3.4. «Однострочное поле»3.5.3.5. «Числовое поле»3.5.3.6. «Многострочный текст»3.5.3.7. «HTD-редактор»3.5.3.8. «Выпадающий список»3.5.3.9. «Дата/время»3.5.3.10. «Выбор вариантов»3.5.3.11. «Переключатель вариантов»3.5.3.12. «Изображение»3.5.3.13. «Файл»3.5.3.14. «Ссылка»3.5.3.15. «Объекты Synergy»3.5.3.16. «Счетчик»3.5.3.17. «Лист подписей»3.5.3.18. «Лист резолюций»3.5.3.19. «Ход выполнения»3.5.3.20. «Ссылка на документ»3.5.3.21. «Период повторения»3.5.3.22. «Ссылка на проект/портфель»3.5.3.23. «Ссылка на реестр»3.5.3.24. «Ссылка на адресную книгу»3.5.3.25. «Свойства документа»3.5.3.26. «Ссылка на файл в хранилище»\n\n3.5.3.1. Базовые3.5.3.2. «Страница» и «Таблица»3.5.3.3. «Неизменяемый текст»3.5.3.4. «Однострочное поле»3.5.3.5. «Числовое поле»3.5.3.6. «Многострочный текст»3.5.3.7. «HTD-редактор»3.5.3.8. «Выпадающий список»3.5.3.9. «Дата/время»3.5.3.10. «Выбор вариантов»3.5.3.11. «Переключатель вариантов»3.5.3.12. «Изображение»3.5.3.13. «Файл»3.5.3.14. «Ссылка»3.5.3.15. «Объекты Synergy»3.5.3.16. «Счетчик»3.5.3.17. «Лист подписей»3.5.3.18. «Лист резолюций»3.5.3.19. «Ход выполнения»3.5.3.20. «Ссылка на документ»3.5.3.21. «Период повторения»3.5.3.22. «Ссылка на проект/портфель»3.5.3.23. «Ссылка на реестр»3.5.3.24. «Ссылка на адресную книгу»3.5.3.25. «Свойства документа»3.5.3.26. «Ссылка на файл в хранилище»\n\n3.5.3.1. Базовые\n\n3.5.3.2. «Страница» и «Таблица»\n\n3.5.3.3. «Неизменяемый текст»\n\n3.5.3.4. «Однострочное поле»\n\n3.5.3.5. «Числовое поле»\n\n3.5.3.6. «Многострочный текст»\n\n3.5.3.7. «HTD-редактор»\n\n3.5.3.8. «Выпадающий список»\n\n3.5.3.9. «Дата/время»\n\n3.5.3.10. «Выбор вариантов»\n\n3.5.3.11. «Переключатель вариантов»\n\n3.5.3.12. «Изображение»\n\n3.5.3.13. «Файл»\n\n3.5.3.14. «Ссылка»\n\n3.5.3.15. «Объекты Synergy»\n\n3.5.3.16. «Счетчик»\n\n3.5.3.17. «Лист подписей»\n\n3.5.3.18. «Лист резолюций»\n\n3.5.3.19. «Ход выполнения»\n\n3.5.3.20. «Ссылка на документ»\n\n3.5.3.21. «Период повторения»\n\n3.5.3.22. «Ссылка на проект/портфель»\n\n3.5.3.23. «Ссылка на реестр»\n\n3.5.3.24. «Ссылка на адресную книгу»\n\n3.5.3.25. «Свойства документа»\n\n3.5.3.26. «Ссылка на файл в хранилище»\n\n3.5.4. Сервисы\n\n3.5.5. Утилиты3.5.5.1. AS.FORMS.ApiUtils\n\n3.5.5.1. AS.FORMS.ApiUtils\n\n3.5.5.1. AS.FORMS.ApiUtils\n\n3.5.6. Логгер",
    "Для приложений, которые подключают проигрыватель форм, доступен объектAS.OPTIONS,\nЗначения данного объекта в SYNERGY заполняются в момент инициализации проигрывателя.\nЕсли проигрыватель форм используется во внешнем приложении, вам необходимо заполнить\nзначения данного объекта самостоятельно.\nИнтерпретируется как глобальные переменные приложения.\n\n```\nAS.OPTIONS\n```\n\nПриложение, использующее проигрыватель форм, может осуществлять следующие операции\nс объектомAS.OPTIONS:\n\n```\nAS.OPTIONS\n```\n\n- Читать значения полей\n- Переопределять значения полей\n- Добавлять свои необходимые поля (учитывайте что такие поля сбрасываются\nпосле переинициализации приложения, например после обновления страницы браузера)\n\nAS.OPTIONSФормат объекта:\n\n```\nAS.OPTIONS\n```\n\n```\n{\n    coreUrl: \"http://127.0.0.1:8080/Synergy/\",  // адрес Synergy, обязательное поле\n    login: '',                                  // логин пользователя, обязательное поле\n    password: '',                               // пароль пользователя, обязательное поле\n    locale: \"ru\",                               // локаль пользователя, обязательное поле\n    currentUser: {                              // информация об авторизованном пользователе\n        userId: \"1\",                            // идентификатор пользователя в Synergy\n        lastname: \"Lastname\",                   // фамилия пользователя\n        firstname: \"Firstname\",                 // имя пользователя\n        patronymic: \"Patronymic\",               // отчество пользователя\n        positions: {},                          // должности пользователя в оргструктуре Synergy\n        sessionID: \"\"                           // идентификатор сессии\n    },\n    options: {},\n    requestTimeout: 5000,                       // таймаут на запросы (AJAX), миллисекунды\n    noCustomScripting: false,                   // отключить все ВМК\n    mobilePlayer: false                         // мобильный проигрыватель форм\n}\n\n```\n\nПримечаниеПриведенные выше значения полей являются дефолтными\n\nПримечание\n\nПриведенные выше значения полей являются дефолтными\n\nПримечаниеДоступны следующие локали по умолчанию ru, kk, en.\n\nПримечание\n\nДоступны следующие локали по умолчанию ru, kk, en.",
    "Для приложений, которые подключают проигрыватель форм, доступен объектAS.OPTIONS,\nЗначения данного объекта в SYNERGY заполняются в момент инициализации проигрывателя.\nЕсли проигрыватель форм используется во внешнем приложении, вам необходимо заполнить\nзначения данного объекта самостоятельно.\nИнтерпретируется как глобальные переменные приложения.\n\n```\nAS.OPTIONS\n```\n\nПриложение, использующее проигрыватель форм, может осуществлять следующие операции\nс объектомAS.OPTIONS:\n\n```\nAS.OPTIONS\n```\n\n- Читать значения полей\n- Переопределять значения полей\n- Добавлять свои необходимые поля (учитывайте что такие поля сбрасываются\nпосле переинициализации приложения, например после обновления страницы браузера)\n\nAS.OPTIONSФормат объекта:\n\n```\nAS.OPTIONS\n```\n\n```\n{\n    coreUrl: \"http://127.0.0.1:8080/Synergy/\",  // адрес Synergy, обязательное поле\n    login: '',                                  // логин пользователя, обязательное поле\n    password: '',                               // пароль пользователя, обязательное поле\n    locale: \"ru\",                               // локаль пользователя, обязательное поле\n    currentUser: {                              // информация об авторизованном пользователе\n        userId: \"1\",                            // идентификатор пользователя в Synergy\n        lastname: \"Lastname\",                   // фамилия пользователя\n        firstname: \"Firstname\",                 // имя пользователя\n        patronymic: \"Patronymic\",               // отчество пользователя\n        positions: {},                          // должности пользователя в оргструктуре Synergy\n        sessionID: \"\"                           // идентификатор сессии\n    },\n    options: {},\n    requestTimeout: 5000,                       // таймаут на запросы (AJAX), миллисекунды\n    noCustomScripting: false,                   // отключить все ВМК\n    mobilePlayer: false                         // мобильный проигрыватель форм\n}\n\n```\n\nПримечаниеПриведенные выше значения полей являются дефолтными\n\nПримечание\n\nПриведенные выше значения полей являются дефолтными\n\nПримечаниеДоступны следующие локали по умолчанию ru, kk, en.\n\nПримечание\n\nДоступны следующие локали по умолчанию ru, kk, en.",
    "```\nAS.FORMS.\n```\n\n```\nbus\n```\n\nГлобальная шина событий.\n\nТипы событий\n\nformShow- событие отображения формы, функция обратного вызова принимает следующие параметрыObject event:                          возникшее событиеAS.FORMS.PlayerModel()playerModel:      модель проигрывателяAS.FORMS.PlayerView()playerView:        отображение проигрывателяformDestroy- событие уничтожения формы, функция обратного вызова принимает следующие параметрыObject event:                          возникшее событиеAS.FORMS.PlayerModel()playerModel:      модель проигрывателя\n\nObject event:                          возникшее событие\n\nAS.FORMS.PlayerModel()playerModel:      модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\nAS.FORMS.PlayerView()playerView:        отображение проигрывателя\n\n```\nAS.FORMS.PlayerView()\n```\n\nObject event:                          возникшее событие\n\nAS.FORMS.PlayerModel()playerModel:      модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\nМетоды\n\n```\nAS.FORMS.\n```\n\n```\ntrigger\n```\n\nИнициировать событие\n\nАргументы: | eventType(String) – тип событияargs(Array) – аргументы, которые будут переданы в callback\n\n- eventType(String) – тип события\n- args(Array) – аргументы, которые будут переданы в callback\n\n```\non\n```\n\nподписаться на событие\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n```\noff\n```\n\nотписаться от события\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова\n\n```\nAS.FORMS.\n```\n\n```\ncreatePlayer\n```\n\nСоздать экземпляр проигрывателя\n\nРезультат: | Object, со следующими полями и методамиAS.FORMS.model¶Модель проигрывателяAS.FORMS.PlayerModel()view¶Представление проигрывателяAS.FORMS.PlayerView()showFormByCode(formCode[,version])¶Отобразить форму по ее коду, без создания соответствующего экземпляра asfDataАргументы:formCode(String) – Код формы.version(Number) – Версия формы.showFormData(formUUID[,version[,dataUUID[,dataVersion]]])¶Отобразить форму по идентификаторуАргументы:formUUID(String) – Идентификатор формы.version(Number) – Номер версии формы.dataUUID(String) – Идентификатор данных формы.dataVersion(Number) – Номер версии данных формы.saveFormData(callback)¶Сохранить данные формыАргументы:callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.destroy()¶Удалить экземпляр проигрывателя | Аргументы: | formCode(String) – Код формы.version(Number) – Версия формы. | Аргументы: | formUUID(String) – Идентификатор формы.version(Number) – Номер версии формы.dataUUID(String) – Идентификатор данных формы.dataVersion(Number) – Номер версии данных формы. | Аргументы: | callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.\nАргументы: | formCode(String) – Код формы.version(Number) – Версия формы.\nАргументы: | formUUID(String) – Идентификатор формы.version(Number) – Номер версии формы.dataUUID(String) – Идентификатор данных формы.dataVersion(Number) – Номер версии данных формы.\nАргументы: | callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.\n\n```\nObject\n```\n\n```\nAS.FORMS.\n```\n\n```\nmodel\n```\n\nМодель проигрывателяAS.FORMS.PlayerModel()\n\n```\nAS.FORMS.PlayerModel()\n```\n\n```\nview\n```\n\nПредставление проигрывателяAS.FORMS.PlayerView()\n\n```\nAS.FORMS.PlayerView()\n```\n\n```\nshowFormByCode\n```\n\nОтобразить форму по ее коду, без создания соответствующего экземпляра asfData\n\nАргументы: | formCode(String) – Код формы.version(Number) – Версия формы.\n\n- formCode(String) – Код формы.\n- version(Number) – Версия формы.\n\n```\nshowFormData\n```\n\nОтобразить форму по идентификатору\n\nАргументы: | formUUID(String) – Идентификатор формы.version(Number) – Номер версии формы.dataUUID(String) – Идентификатор данных формы.dataVersion(Number) – Номер версии данных формы.\n\n- formUUID(String) – Идентификатор формы.\n- version(Number) – Номер версии формы.\n- dataUUID(String) – Идентификатор данных формы.\n- dataVersion(Number) – Номер версии данных формы.\n\n```\nsaveFormData\n```\n\nСохранить данные формы\n\nАргументы: | callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.\n\n- callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.\n\n```\ndestroy\n```\n\nУдалить экземпляр проигрывателя\n\n```\nAS.FORMS.\n```\n\n```\nPlayerModel\n```\n\nМодель проигрывателя\n\nТипы событий\n\nvalueChange- событие изменение данных компонента, функция обратного вызова принимает следующие параметрыObject event:                                      возникшее событиеAS.FORMS.Model()model:                  модель компонента, который отправил событиеdataLoad- событие подгрузки данных проигрывателем, функция обратного вызова принимает следующие параметрыObject event:                                      возникшее событиеAS.FORMS.PlayerModel()model:            модель проигрывателяformShow- событие отображения формы\n(вызывается каждый раз при смене режима отображения редактирование-чтение),\nфункция обратного вызова принимает следующие параметрыObject event:                                      возникшее событиеAS.FORMS.PlayerModel()model:            модель проигрывателяformDestroy- событие уничтожения формы, функция обратного вызова принимает следующие параметрыObject event:                                      возникшее событиеAS.FORMS.PlayerModel()model:            модель проигрывателя\n\nObject event:                                      возникшее событие\n\nAS.FORMS.Model()model:                  модель компонента, который отправил событие\n\n```\nAS.FORMS.Model()\n```\n\nObject event:                                      возникшее событие\n\nAS.FORMS.PlayerModel()model:            модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\nformShow- событие отображения формы\n(вызывается каждый раз при смене режима отображения редактирование-чтение),\nфункция обратного вызова принимает следующие параметры\n\nObject event:                                      возникшее событиеAS.FORMS.PlayerModel()model:            модель проигрывателя\n\nObject event:                                      возникшее событие\n\nAS.FORMS.PlayerModel()model:            модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\nObject event:                                      возникшее событие\n\nAS.FORMS.PlayerModel()model:            модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\ntrigger\n```\n\nИнициировать событие\n\nАргументы: | eventType(String) – тип событияargs(Array) – аргументы, которые будут переданы в callback\n\n- eventType(String) – тип события\n- args(Array) – аргументы, которые будут переданы в callback\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\non\n```\n\nподписаться на событие\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\noff\n```\n\nотписаться от события\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nmodels\n```\n\nМассив моделей страницAS.FORMS.TableModel()\n\n```\nAS.FORMS.TableModel()\n```\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nformId\n```\n\nИдентификатор формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nformCode\n```\n\nКод формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nformName\n```\n\nНаименование формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nasfDataId\n```\n\nИдентификатор данных формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nnodeId\n```\n\nИдентификатор данных формы в Хранилище\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nhasChanges\n```\n\nИмеются изменения в значениях компонентов формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nerrorDataLoad\n```\n\nИмеются ошибки при загрузке данных формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nformats\n```\n\nФорматы печати\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\ndefaultPrintFormat\n```\n\nФормат печати по-умолчанию\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nhasPrintable\n```\n\nИмеется печатное представление\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\ngetModelWithId\n```\n\nПолучить модель компонента по его идентификатору\n\nАргументы: | cmpId(String) – идентификатор компонентаtableId(String) – идентификатор динамической таблицыblockNumber(Number) – номер блока динамической таблицы\nРезультат: | AS.FORMS.Model()\n\n- cmpId(String) – идентификатор компонента\n- tableId(String) – идентификатор динамической таблицы\n- blockNumber(Number) – номер блока динамической таблицы\n\nAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\ngetErrors\n```\n\nПолучить список ошибчно заполненных компонентов\n\nРезультат: | [Object]массив объектов следующего вида {id, errorCode}\nВиды ошибок: emptyValue, wrongValue, deletedValue,valueTooHigh, valueTooSmall, formActionError\n\n```\n[Object]\n```\n\nvalueTooHigh, valueTooSmall, formActionError\n\nvalueTooHigh, valueTooSmall, formActionError\n\n```\nAS.FORMS.\n```\n\n```\nPlayerView\n```\n\nОтображение проигрывателя\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\nviews\n```\n\nМассив отображений страницAS.FORMS.TableStaticView()\n\n```\nAS.FORMS.TableStaticView()\n```\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\neditable\n```\n\nВключен режим редактирования формы\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\nappendTo\n```\n\nОтобразить проигрыватель в указанном компоненте (например „div“)\n\nАргументы: | element(HTMLElement) – Элемент в котором необходимо отобразить проигрыватель\n\n- element(HTMLElement) – Элемент в котором необходимо отобразить проигрыватель\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\ngetViewWithId\n```\n\nПолучить отображение компонента по его идентификатору\n\nАргументы: | cmpId(String) – идентификатор компонентаtableId(String) – идентификатор динамической таблицыblockNumber(Number) – номер блока динамической таблицы\nРезультат: | AS.FORMS.View()\n\n- cmpId(String) – идентификатор компонента\n- tableId(String) – идентификатор динамической таблицы\n- blockNumber(Number) – номер блока динамической таблицы\n\nAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\nsetEditable\n```\n\nВключить режим редактирования формы\n\nАргументы: | editable(boolean) – режим редактирования формы\n\n- editable(boolean) – режим редактирования формы",
    "```\nAS.FORMS.\n```\n\n```\nbus\n```\n\nГлобальная шина событий.\n\nТипы событий\n\nformShow- событие отображения формы, функция обратного вызова принимает следующие параметрыObject event:                          возникшее событиеAS.FORMS.PlayerModel()playerModel:      модель проигрывателяAS.FORMS.PlayerView()playerView:        отображение проигрывателяformDestroy- событие уничтожения формы, функция обратного вызова принимает следующие параметрыObject event:                          возникшее событиеAS.FORMS.PlayerModel()playerModel:      модель проигрывателя\n\nObject event:                          возникшее событие\n\nAS.FORMS.PlayerModel()playerModel:      модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\nAS.FORMS.PlayerView()playerView:        отображение проигрывателя\n\n```\nAS.FORMS.PlayerView()\n```\n\nObject event:                          возникшее событие\n\nAS.FORMS.PlayerModel()playerModel:      модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\nМетоды\n\n```\nAS.FORMS.\n```\n\n```\ntrigger\n```\n\nИнициировать событие\n\nАргументы: | eventType(String) – тип событияargs(Array) – аргументы, которые будут переданы в callback\n\n- eventType(String) – тип события\n- args(Array) – аргументы, которые будут переданы в callback\n\n```\non\n```\n\nподписаться на событие\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n```\noff\n```\n\nотписаться от события\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова\n\n```\nAS.FORMS.\n```\n\n```\ncreatePlayer\n```\n\nСоздать экземпляр проигрывателя\n\nРезультат: | Object, со следующими полями и методамиAS.FORMS.model¶Модель проигрывателяAS.FORMS.PlayerModel()view¶Представление проигрывателяAS.FORMS.PlayerView()showFormByCode(formCode[,version])¶Отобразить форму по ее коду, без создания соответствующего экземпляра asfDataАргументы:formCode(String) – Код формы.version(Number) – Версия формы.showFormData(formUUID[,version[,dataUUID[,dataVersion]]])¶Отобразить форму по идентификаторуАргументы:formUUID(String) – Идентификатор формы.version(Number) – Номер версии формы.dataUUID(String) – Идентификатор данных формы.dataVersion(Number) – Номер версии данных формы.saveFormData(callback)¶Сохранить данные формыАргументы:callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.destroy()¶Удалить экземпляр проигрывателя | Аргументы: | formCode(String) – Код формы.version(Number) – Версия формы. | Аргументы: | formUUID(String) – Идентификатор формы.version(Number) – Номер версии формы.dataUUID(String) – Идентификатор данных формы.dataVersion(Number) – Номер версии данных формы. | Аргументы: | callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.\nАргументы: | formCode(String) – Код формы.version(Number) – Версия формы.\nАргументы: | formUUID(String) – Идентификатор формы.version(Number) – Номер версии формы.dataUUID(String) – Идентификатор данных формы.dataVersion(Number) – Номер версии данных формы.\nАргументы: | callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.\n\n```\nObject\n```\n\n```\nAS.FORMS.\n```\n\n```\nmodel\n```\n\nМодель проигрывателяAS.FORMS.PlayerModel()\n\n```\nAS.FORMS.PlayerModel()\n```\n\n```\nview\n```\n\nПредставление проигрывателяAS.FORMS.PlayerView()\n\n```\nAS.FORMS.PlayerView()\n```\n\n```\nshowFormByCode\n```\n\nОтобразить форму по ее коду, без создания соответствующего экземпляра asfData\n\nАргументы: | formCode(String) – Код формы.version(Number) – Версия формы.\n\n- formCode(String) – Код формы.\n- version(Number) – Версия формы.\n\n```\nshowFormData\n```\n\nОтобразить форму по идентификатору\n\nАргументы: | formUUID(String) – Идентификатор формы.version(Number) – Номер версии формы.dataUUID(String) – Идентификатор данных формы.dataVersion(Number) – Номер версии данных формы.\n\n- formUUID(String) – Идентификатор формы.\n- version(Number) – Номер версии формы.\n- dataUUID(String) – Идентификатор данных формы.\n- dataVersion(Number) – Номер версии данных формы.\n\n```\nsaveFormData\n```\n\nСохранить данные формы\n\nАргументы: | callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.\n\n- callback– Функция, которая будет вызвана после сохранения данных с параметром asfDataUUID.\n\n```\ndestroy\n```\n\nУдалить экземпляр проигрывателя\n\n```\nAS.FORMS.\n```\n\n```\nPlayerModel\n```\n\nМодель проигрывателя\n\nТипы событий\n\nvalueChange- событие изменение данных компонента, функция обратного вызова принимает следующие параметрыObject event:                                      возникшее событиеAS.FORMS.Model()model:                  модель компонента, который отправил событиеdataLoad- событие подгрузки данных проигрывателем, функция обратного вызова принимает следующие параметрыObject event:                                      возникшее событиеAS.FORMS.PlayerModel()model:            модель проигрывателяformShow- событие отображения формы\n(вызывается каждый раз при смене режима отображения редактирование-чтение),\nфункция обратного вызова принимает следующие параметрыObject event:                                      возникшее событиеAS.FORMS.PlayerModel()model:            модель проигрывателяformDestroy- событие уничтожения формы, функция обратного вызова принимает следующие параметрыObject event:                                      возникшее событиеAS.FORMS.PlayerModel()model:            модель проигрывателя\n\nObject event:                                      возникшее событие\n\nAS.FORMS.Model()model:                  модель компонента, который отправил событие\n\n```\nAS.FORMS.Model()\n```\n\nObject event:                                      возникшее событие\n\nAS.FORMS.PlayerModel()model:            модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\nformShow- событие отображения формы\n(вызывается каждый раз при смене режима отображения редактирование-чтение),\nфункция обратного вызова принимает следующие параметры\n\nObject event:                                      возникшее событиеAS.FORMS.PlayerModel()model:            модель проигрывателя\n\nObject event:                                      возникшее событие\n\nAS.FORMS.PlayerModel()model:            модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\nObject event:                                      возникшее событие\n\nAS.FORMS.PlayerModel()model:            модель проигрывателя\n\n```\nAS.FORMS.PlayerModel()\n```\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\ntrigger\n```\n\nИнициировать событие\n\nАргументы: | eventType(String) – тип событияargs(Array) – аргументы, которые будут переданы в callback\n\n- eventType(String) – тип события\n- args(Array) – аргументы, которые будут переданы в callback\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\non\n```\n\nподписаться на событие\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\noff\n```\n\nотписаться от события\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nmodels\n```\n\nМассив моделей страницAS.FORMS.TableModel()\n\n```\nAS.FORMS.TableModel()\n```\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nformId\n```\n\nИдентификатор формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nformCode\n```\n\nКод формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nformName\n```\n\nНаименование формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nasfDataId\n```\n\nИдентификатор данных формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nnodeId\n```\n\nИдентификатор данных формы в Хранилище\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nhasChanges\n```\n\nИмеются изменения в значениях компонентов формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nerrorDataLoad\n```\n\nИмеются ошибки при загрузке данных формы\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nformats\n```\n\nФорматы печати\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\ndefaultPrintFormat\n```\n\nФормат печати по-умолчанию\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\nhasPrintable\n```\n\nИмеется печатное представление\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\ngetModelWithId\n```\n\nПолучить модель компонента по его идентификатору\n\nАргументы: | cmpId(String) – идентификатор компонентаtableId(String) – идентификатор динамической таблицыblockNumber(Number) – номер блока динамической таблицы\nРезультат: | AS.FORMS.Model()\n\n- cmpId(String) – идентификатор компонента\n- tableId(String) – идентификатор динамической таблицы\n- blockNumber(Number) – номер блока динамической таблицы\n\nAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.PlayerModel.\n```\n\n```\ngetErrors\n```\n\nПолучить список ошибчно заполненных компонентов\n\nРезультат: | [Object]массив объектов следующего вида {id, errorCode}\nВиды ошибок: emptyValue, wrongValue, deletedValue,valueTooHigh, valueTooSmall, formActionError\n\n```\n[Object]\n```\n\nvalueTooHigh, valueTooSmall, formActionError\n\nvalueTooHigh, valueTooSmall, formActionError\n\n```\nAS.FORMS.\n```\n\n```\nPlayerView\n```\n\nОтображение проигрывателя\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\nviews\n```\n\nМассив отображений страницAS.FORMS.TableStaticView()\n\n```\nAS.FORMS.TableStaticView()\n```\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\neditable\n```\n\nВключен режим редактирования формы\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\nappendTo\n```\n\nОтобразить проигрыватель в указанном компоненте (например „div“)\n\nАргументы: | element(HTMLElement) – Элемент в котором необходимо отобразить проигрыватель\n\n- element(HTMLElement) – Элемент в котором необходимо отобразить проигрыватель\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\ngetViewWithId\n```\n\nПолучить отображение компонента по его идентификатору\n\nАргументы: | cmpId(String) – идентификатор компонентаtableId(String) – идентификатор динамической таблицыblockNumber(Number) – номер блока динамической таблицы\nРезультат: | AS.FORMS.View()\n\n- cmpId(String) – идентификатор компонента\n- tableId(String) – идентификатор динамической таблицы\n- blockNumber(Number) – номер блока динамической таблицы\n\nAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.PlayerView.\n```\n\n```\nsetEditable\n```\n\nВключить режим редактирования формы\n\nАргументы: | editable(boolean) – режим редактирования формы\n\n- editable(boolean) – режим редактирования формы",
    "- 3.5.3.1. Базовые\n- 3.5.3.2. «Страница» и «Таблица»\n- 3.5.3.3. «Неизменяемый текст»\n- 3.5.3.4. «Однострочное поле»\n- 3.5.3.5. «Числовое поле»\n- 3.5.3.6. «Многострочный текст»\n- 3.5.3.7. «HTD-редактор»\n- 3.5.3.8. «Выпадающий список»\n- 3.5.3.9. «Дата/время»\n- 3.5.3.10. «Выбор вариантов»\n- 3.5.3.11. «Переключатель вариантов»\n- 3.5.3.12. «Изображение»\n- 3.5.3.13. «Файл»\n- 3.5.3.14. «Ссылка»\n- 3.5.3.15. «Объекты Synergy»3.5.3.15.1. Тип данных «Пользователи»3.5.3.15.2. Тип данных «Должности»3.5.3.15.3. Тип данных «Подразделения»\n- 3.5.3.16. «Счетчик»\n- 3.5.3.17. «Лист подписей»3.5.3.17.1. Тип данных «Лист подписей»\n- 3.5.3.18. «Лист резолюций»\n- 3.5.3.19. «Ход выполнения»\n- 3.5.3.20. «Ссылка на документ»\n- 3.5.3.21. «Период повторения»\n- 3.5.3.22. «Ссылка на проект/портфель»\n- 3.5.3.23. «Ссылка на реестр»\n- 3.5.3.24. «Ссылка на адресную книгу»\n- 3.5.3.25. «Свойства документа»\n- 3.5.3.26. «Ссылка на файл в хранилище»\n\n- 3.5.3.15.1. Тип данных «Пользователи»\n- 3.5.3.15.2. Тип данных «Должности»\n- 3.5.3.15.3. Тип данных «Подразделения»\n\n- 3.5.3.17.1. Тип данных «Лист подписей»",
    "- 3.5.3.1. Базовые\n- 3.5.3.2. «Страница» и «Таблица»\n- 3.5.3.3. «Неизменяемый текст»\n- 3.5.3.4. «Однострочное поле»\n- 3.5.3.5. «Числовое поле»\n- 3.5.3.6. «Многострочный текст»\n- 3.5.3.7. «HTD-редактор»\n- 3.5.3.8. «Выпадающий список»\n- 3.5.3.9. «Дата/время»\n- 3.5.3.10. «Выбор вариантов»\n- 3.5.3.11. «Переключатель вариантов»\n- 3.5.3.12. «Изображение»\n- 3.5.3.13. «Файл»\n- 3.5.3.14. «Ссылка»\n- 3.5.3.15. «Объекты Synergy»3.5.3.15.1. Тип данных «Пользователи»3.5.3.15.2. Тип данных «Должности»3.5.3.15.3. Тип данных «Подразделения»\n- 3.5.3.16. «Счетчик»\n- 3.5.3.17. «Лист подписей»3.5.3.17.1. Тип данных «Лист подписей»\n- 3.5.3.18. «Лист резолюций»\n- 3.5.3.19. «Ход выполнения»\n- 3.5.3.20. «Ссылка на документ»\n- 3.5.3.21. «Период повторения»\n- 3.5.3.22. «Ссылка на проект/портфель»\n- 3.5.3.23. «Ссылка на реестр»\n- 3.5.3.24. «Ссылка на адресную книгу»\n- 3.5.3.25. «Свойства документа»\n- 3.5.3.26. «Ссылка на файл в хранилище»\n\n- 3.5.3.15.1. Тип данных «Пользователи»\n- 3.5.3.15.2. Тип данных «Должности»\n- 3.5.3.15.3. Тип данных «Подразделения»\n\n- 3.5.3.17.1. Тип данных «Лист подписей»",
    "Модель поведения и отображения каждого компонента определяеются описанием, которое содержится в форме\n\nОписание компонентов имеют базовые свойства, присутствующие у всех компонентов,\nа так же специфические для каждого типа\n\nБазовое описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"person\",                       // идентификатор компонента\n    \"type\": \"type\",                       // тип компонента\n    \"style\": {                            // стиль компонента\n        \"align\": \"center\",\n        \"font\": \"Courier New\",\n        \"fontsize\": \"12\",\n        \"bold\": true,\n        \"italic\": false,\n        \"underline\": false,\n        \"strike\": false,\n        \"height\": \"20\",\n        \"width\": \"200\"\n    },\n    \"config\": {                           // конфигурация компонента\n        \"read-only\": true,                // заблокировать от изменений пользователем\n        \"script\": \"model.setValue('1');\"  // скрипт компонента\n    },\n    \"required\": true,                     // обязательное поле\n    \"data\": {                             // дефолтные данные компонента\n        \"id\": \"person\",\n        \"type\": \"type\",\n        \"value\": \"Дефолтное значение\"\n    }\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nModel\n```\n\nБазовая модель для всех компонентов\n\nТипы событий\n\nкаждый компонент может добавлять свои специфичные типы событий\n\nvalueChange- событие изменения значения компонента, функция обратного вызова принимает следующие параметрыObject event:                          возникшее событиеAS.FORMS.Model()model:      модельmarkInvalid- пометить значение компонента как не валидное, функция обратного вызова принимает следующие параметрыObject event:                          возникшее событиеAS.FORMS.Model()model:      модельunmarkInvalid- пометить значение компонента как валидное, функция обратного вызова принимает следующие параметрыObject event:                          возникшее событиеAS.FORMS.Model()model:      модельmodelDestroyed- событие уничтожения модели компонента, функция обратного вызова принимает следующие параметрыObject event:                          возникшее событие\n\nObject event:                          возникшее событие\n\nAS.FORMS.Model()model:      модель\n\n```\nAS.FORMS.Model()\n```\n\nObject event:                          возникшее событие\n\nAS.FORMS.Model()model:      модель\n\n```\nAS.FORMS.Model()\n```\n\nObject event:                          возникшее событие\n\nAS.FORMS.Model()model:      модель\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.Model.\n```\n\n```\ntrigger\n```\n\nИнициировать событие\n\nАргументы: | eventType(String) – тип событияargs(Array) – аргументы, которые будут переданы в callback\n\n- eventType(String) – тип события\n- args(Array) – аргументы, которые будут переданы в callback\n\n```\nAS.FORMS.Model.\n```\n\n```\non\n```\n\nподписаться на событие\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова (количество принимаемых аргументов засивит от события)\n\n```\nAS.FORMS.Model.\n```\n\n```\noff\n```\n\nотписаться от события\n\nАргументы: | eventType(String) – тип событияcallback(Function) – функция обратного вызова\n\n- eventType(String) – тип события\n- callback(Function) – функция обратного вызова\n\n```\nAS.FORMS.Model.\n```\n\n```\nasfProperty\n```\n\nОпределение компонента из описания формы\n\n```\nAS.FORMS.Model.\n```\n\n```\nplayerModel\n```\n\nМодель проигрывателя\n\n```\nAS.FORMS.Model.\n```\n\n```\nfireChangeEvents\n```\n\nВызов событий изменения значения формы\n\n```\nAS.FORMS.Model.\n```\n\n```\nisEmpty\n```\n\nРезультат: | true: Значение компонента не заданоfalse: Значение компонента задано\n\nfalse: Значение компонента задано\n\n```\nAS.FORMS.Model.\n```\n\n```\nsetValue\n```\n\nВставить новое значение и отправить уведомление всем подписанным объектам, в т.ч. отображению\n\nАргументы: | newValue(Object) – Значение компонента  (Тип ринимаемого значения зафимит от компонента)\n\n- newValue(Object) – Значение компонента  (Тип ринимаемого значения зафимит от компонента)\n\n```\nAS.FORMS.Model.\n```\n\n```\ngetErrors\n```\n\nПолучение ошибок заполнения поля согласно настройкамasfProperty\n\n```\nasfProperty\n```\n\nЕсли компоненту необходимо возвращать свои специфические ошибки, то реализуйте в модели\nкомпонента методgetSpecialErrors. Метод должен возвращать список\nспецифических ошибок в том же формате, что и данный метод\n\n```\ngetSpecialErrors\n```\n\nРезультат: | [object]Если массив пустой, значит ошибки отсутствуют,\nиначе - его элементы имеют поля:errorCode- код ошибки;id- идентификатор компонента.Возможные коды ошибок:emptyValuewrongValuedeletedValuevalueTooHighvalueTooSmallДля одного и того же компонента может быть как несколько ошибок, так может и не быть ни одной.\n\n```\n[object]\n```\n\n- errorCode- код ошибки;\n- id- идентификатор компонента.\n\n```\nerrorCode\n```\n\n```\nid\n```\n\nВозможные коды ошибок:\n\n- emptyValue\n- wrongValue\n- deletedValue\n- valueTooHigh\n- valueTooSmall\n\n```\nemptyValue\n```\n\n```\nwrongValue\n```\n\n```\ndeletedValue\n```\n\n```\nvalueTooHigh\n```\n\n```\nvalueTooSmall\n```\n\nДля одного и того же компонента может быть как несколько ошибок, так может и не быть ни одной.\n\n```\nAS.FORMS.Model.\n```\n\n```\ngetLocale\n```\n\nПолучение локали, настроенной в компоненте\n\nРезультат: | StringЛокаль компонента илиAS.FORMS.OPTIONS.locale\n\n```\nString\n```\n\n```\nAS.FORMS.OPTIONS\n```\n\n```\nAS.FORMS.Model.\n```\n\n```\ngetHTMLValue\n```\n\nРезультат: | StringHTML-представлениe текстового значения поля со стилями\n\n```\nString\n```\n\n```\nAS.FORMS.Model.\n```\n\n```\ngetValue\n```\n\nРезультат: | Stringзначение компонента  (тип возвращаемого значения зависит от типа компонента)\n\n```\nString\n```\n\n```\nAS.FORMS.Model.\n```\n\n```\ngetTextValue\n```\n\nРезультат: | Stringтекстовое значение компонента\n\n```\nString\n```\n\n```\nAS.FORMS.Model.\n```\n\n```\ngetAsfData\n```\n\nАргументы: | blockNumber(Number) – Номер строки динамической таблицы (если это компонент статической таблицы, то передавать эту переменную не нужно)\nРезультат: | asfDataДанные компонента\n\n- blockNumber(Number) – Номер строки динамической таблицы (если это компонент статической таблицы, то передавать эту переменную не нужно)\n\nasfDataДанные компонента\n\n```\nasfData\n```\n\n```\nAS.FORMS.Model.\n```\n\n```\nsetAsfData\n```\n\nВставить значениеasfData\n\nАргументы: | asfData(asfData) – Данные компонента\n\n- asfData(asfData) – Данные компонента\n\n```\nAS.FORMS.\n```\n\n```\nView\n```\n\nБазовое отображение всех компонентов.\n\n```\nAS.FORMS.View.\n```\n\n```\nmodel\n```\n\nМодель. Наследует AS.FORMS.Model\n\n```\nAS.FORMS.View.\n```\n\n```\ncontainer\n```\n\nКонтейнер, в котором будет отрисовываться отображение\n\n```\nAS.FORMS.View.\n```\n\n```\ninput\n```\n\nПоле ввода для некоторых компонентов:\n\nтекстовое полечисловое полемногострочный текст\n\nтекстовое полечисловое полемногострочный текст\n\n- текстовое поле\n- числовое поле\n- многострочный текст\n\n```\nAS.FORMS.View.\n```\n\n```\nplayerView\n```\n\nОтображение проигрывателя\n\n```\nAS.FORMS.View.\n```\n\n```\nunmarkInvalid\n```\n\nУбрать пометку неправильно заполненного поля\n\n```\nAS.FORMS.View.\n```\n\n```\nmarkInvalid\n```\n\nПометить поле как неправильно заполненное\n\n```\nAS.FORMS.View.\n```\n\n```\ncheckValid\n```\n\nПроверить корректность текущего значения (если поле заполнено неверно, то вызовется метод markInvalid)\n\n```\nAS.FORMS.View.\n```\n\n```\nsetEnabled\n```\n\nСделать доступным или недоступным для редактирования\n\nАргументы: | enabled(boolean) – true/false\n\n- enabled(boolean) – true/false\n\n```\nAS.FORMS.View.\n```\n\n```\nsetVisible\n```\n\nСделать видимым или невидимым\n\nАргументы: | visible(boolean) – true/false\n\n- visible(boolean) – true/false\n\n```\nAS.FORMS.View.\n```\n\n```\nupdateValueFromModel\n```\n\nОбновить отображение согласно значению модели",
    "Описание статической таблицы выглядит следующим образом\n\n```\n{\n    \"id\": \"simple-table\",                 // идентификатор компонента\n    \"type\": \"table\",                      // тип компонента\n    \"config\": {\n        \"fixedLayout\": false,             // фиксированная разметка\n        \"format\": \"${salary} - ${amount}\",// форматная строка\n        \"delimeter\": \"\"                   // разделитель свертки\n    },\n    \"properties\": [],                     // массив компонентов, так же как в форме\n    \"layout\": {},                         // разметка, так же как в форме\n    \"style\": {                            // стиль компонента\n        \"border\": \"1\",                    // отображать границы\n        \"wrap\": true                      // выводить содержимое в виде абзаца\n    }\n}\n\n```\n\nОписание динамической таблицы выглядит следующим образом\n\n```\n{\n    \"id\": \"table-id\",       // идентификатор компонента\n    \"type\": \"table\",        // тип компонента\n    \"config\": {\n        \"appendRows\": true,   // добавлять строки в режиме заполнения\n        \"init-row\": 2,        // количество отображаемых строк при создании\n        \"fixedLayout\": false, // фиксированная разметка\n        \"isHaveHeaders\": true // добавить заголовок таблицы\n    }\n    \"properties\": [],       // массив компонентов, так же как в форме\n    \"layout\": {},           // разметка, так же как в форме\n    \"style\": {\n        \"border\": \"1\",      // отображать границы\n        \"wrap\": true        // выводить содержимое в виде абзаца\n    }\n}\n\n```\n\nМодель данных динамической таблицы\n\n```\n{\n    \"id\": \"person-list\",                // идентификатор компонента\n    \"type\": \"appendable_table\",         // тип компонента\n    \"key\": \"значение свертки таблицы\",\n    \"data\": [{                          // массив данных таблицы\n        \"id\": \"person-b1\",              // компонент person в первой строке таблицы\n        \"type\": \"textbox\",\n        \"value\": \"Иванов Иван\"\n    },\n    {\n        \"id\": \"age-b1\",                 // компонент age в первой строке таблицы\n        \"type\": \"numericinput\",\n        \"value\": \"23\",\n        \"key\": \"23\"\n    },\n    {\n        \"id\": \"person-b2\",              // компонент person во второй строке таблицы\n        \"type\": \"textbox\",\n        \"value\": \"Сериков Серик\"\n    },\n    {\n        \"id\": \"age-b2\",                 // компонент age во второй строке таблицы\n        \"type\": \"numericinput\",\n        \"value\": \"25\",\n        \"key\": \"25\"\n    }\n    ]\n}\n\n```\n\nПримечаниеКомпоненты внутри таблицы имеют идентификаторы, т.к. таблица может\nиметь несколько блоков, чтобы идентификаторы не дублировались\nдобавляется постфикс -bN, где N номер блока таблицы,\nнумерация блоков начинается с 1. Например, если компонент в таблице\nимеет идентификатор cmp, то значения идентификаторов для блоков\nбудут иметь вид cmp-b1, cmp-b2 и т.д. Окончание -bN должно иметь\nодинаковый номер N для компонентов одного блока.\n\nПримечание\n\nКомпоненты внутри таблицы имеют идентификаторы, т.к. таблица может\nиметь несколько блоков, чтобы идентификаторы не дублировались\nдобавляется постфикс -bN, где N номер блока таблицы,\nнумерация блоков начинается с 1. Например, если компонент в таблице\nимеет идентификатор cmp, то значения идентификаторов для блоков\nбудут иметь вид cmp-b1, cmp-b2 и т.д. Окончание -bN должно иметь\nодинаковый номер N для компонентов одного блока.\n\n```\nAS.FORMS.\n```\n\n```\nTableModel\n```\n\nМодель компонентов «Страница» и «Таблица»\n\n```\nAS.FORMS.TableModel.\n```\n\n```\nbus\n```\n\nДополнительные типы событий\n\ntableRowAdd- событие добавления блока в дин таблицуObject event:                          возникшее событиеAS.FORMS.TableModel()model:      модель проигрывателямассивAS.FORMS.TableModel()models:      модели добавленного блока дин таблицыtableRowDelete- событие удаления блока дин таблицыObject event:                          возникшее событие\n\nObject event:                          возникшее событие\n\nAS.FORMS.TableModel()model:      модель проигрывателя\n\n```\nAS.FORMS.TableModel()\n```\n\nмассивAS.FORMS.TableModel()models:      модели добавленного блока дин таблицы\n\n```\nAS.FORMS.TableModel()\n```\n\n```\nAS.FORMS.TableModel.\n```\n\n```\ngetBlockNumbers\n```\n\nРезультат: | массив с номерами блоков дин таблицы, поскольку блоки из дин таблицы удаляются и добавляются,\nто номер блоков идут не по порядку, например [1, 5, 6, 8] и это не будет ошибкой\n\n```\nAS.FORMS.TableModel.\n```\n\n```\ngetModelWithId\n```\n\nПолучить модель компонента по его идентификатору\n\nparam String cmpId:идентификатор компонентаparam String tableId:идентификатор динамической таблицыparam Number blockNumber:номер блока динамической таблицыreturns:AS.FORMS.Model()\n\nparam String cmpId:\n | идентификатор компонента\nparam String tableId:\n | идентификатор динамической таблицы\nparam Number blockNumber:\n | номер блока динамической таблицы\nreturns: | AS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.TableModel.\n```\n\n```\ncreateRow\n```\n\nДобавляет блок таблицы\n\n```\nAS.FORMS.TableModel.\n```\n\n```\nremoveRow\n```\n\nУдаляет блок таблицы\n\nАргументы: | blockNumber(Number) – индекс блока дин таблицы (по порядку)\n\n- blockNumber(Number) – индекс блока дин таблицы (по порядку)\n\n```\nAS.FORMS.TableModel.\n```\n\n```\nremoveRowByBlockNumber\n```\n\nУдаляет блок таблицы\n\nАргументы: | blockNumber(Number) – номер блока дин таблицы\n\n- blockNumber(Number) – номер блока дин таблицы\n\n```\nAS.FORMS.TableModel.\n```\n\n```\ngetTextValue\n```\n\nВозвращает форматированное значение свертки\n\nРезультат: | значение свертки\n\n```\nAS.FORMS.TableModel.\n```\n\n```\nisHaveHeader\n```\n\nНаличие заголовка\n\n```\nAS.FORMS.TableModel.\n```\n\n```\nisPage\n```\n\nЯвляется страницей\n\n```\nAS.FORMS.TableModel.\n```\n\n```\nisStatic\n```\n\nЯвляется статической таблицей\n\n```\nAS.FORMS.TableModel.\n```\n\n```\nisParagraph\n```\n\nСвертка включена\n\n```\nAS.FORMS.\n```\n\n```\nTableStaticView\n```\n\nОтображение статической таблицы или страницы\n\n```\nAS.FORMS.TableStaticView.\n```\n\n```\ngetRowsCount\n```\n\nВозвращает количество рядов таблицы, не обязательно равно числу блоков дин таблицы, посклько блок может состоять из сколько угодно рядов\n\n```\nAS.FORMS.TableStaticView.\n```\n\n```\nsetColumnVisible\n```\n\nДелает столбец таблицы видимым / невидимым\n\nАргументы: | columnNumber(Number) – номер столбцаvisible(boolean) – видимый\n\n- columnNumber(Number) – номер столбца\n- visible(boolean) – видимый\n\n```\nAS.FORMS.TableStaticView.\n```\n\n```\ngetInvisibleColumns\n```\n\nВозвращает список невидимых столбцов\n\n```\nAS.FORMS.TableStaticView.\n```\n\n```\ngetViewWithId\n```\n\nПолучение отображения компонента с указанным идентификатором в указанной\nтаблице и указанном блоке, если идентификатор таблицы не указан, то ищется\nмодель компонента на странице или в статических таблицах\n\nАргументы: | cmpId(String) – идентификатор компонентаtableId(String) – идентификатор динамической таблицыtableBlockIndex(Number) – номер блока динамической таблицы\nРезультат: | AS.FORMS.View()отображение компонента\n\n- cmpId(String) – идентификатор компонента\n- tableId(String) – идентификатор динамической таблицы\n- tableBlockIndex(Number) – номер блока динамической таблицы\n\nAS.FORMS.View()отображение компонента\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.\n```\n\n```\nTableDynamicView\n```\n\nОтображение динамической таблицы\n\n```\nAS.FORMS.TableDynamicView.\n```\n\n```\nsetEnabled\n```\n\nРазрешить пользователю добавлять и удалять блоки,\nпри этом программная возможность остается\n\nАргументы: | enabled(boolean) – разрешить добавлять и удалять блоки\n\n- enabled(boolean) – разрешить добавлять и удалять блоки\n\n```\nAS.FORMS.TableDynamicView.\n```\n\n```\nsetColumnVisible\n```\n\nСделать столбец таблицы видимым\n\nАргументы: | column(Number) – номер столбца таблицыvisible(boolean) – является видимым\n\n- column(Number) – номер столбца таблицы\n- visible(boolean) – является видимым\n\n```\nAS.FORMS.TableDynamicView.\n```\n\n```\ngetViewWithId\n```\n\nПолучить отображения компонента с указанным идентификатором\nв указанной таблице и указанном блоке, если идентификатор таблицы не указан,\nто ищется модель компонента на странице или в статических таблицах\n\nАргументы: | cmpId(String) – идентификатор компонентаtableId(String) – идентификатор динамической таблицыtableBlockIndex(Number) – номер строки динамической таблицы\nРезультат: | objectотображение компонента\n\n- cmpId(String) – идентификатор компонента\n- tableId(String) – идентификатор динамической таблицы\n- tableBlockIndex(Number) – номер строки динамической таблицы\n\nobjectотображение компонента\n\n```\nobject\n```\n\n```\nAS.FORMS.TableDynamicView.\n```\n\n```\nmergeCell\n```\n\nОбъединить ячейки в блоке\n\nАргументы: | row(Number) – номер ряда таблицыcolumn(Number) – номер столбца таблицыrows(Number) – количество рядов для объединенияcols(Number) – количество столбцов для объединения\n\n- row(Number) – номер ряда таблицы\n- column(Number) – номер столбца таблицы\n- rows(Number) – количество рядов для объединения\n- cols(Number) – количество столбцов для объединения\n\n```\nAS.FORMS.TableDynamicView.\n```\n\n```\nsplitCell\n```\n\nРазъединить ячейки\n\nАргументы: | row(Number) – номер ряда таблицыcolumn(Number) – номер столбца таблицы\n\n- row(Number) – номер ряда таблицы\n- column(Number) – номер столбца таблицы\n\n```\nAS.FORMS.\n```\n\n```\nTableParagraphView\n```\n\nОтображение динамической таблицы в свертке",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"label-cmp\",\n    \"type\": \"label\",\n    \"style\": {\n        \"align\": \"left\",\n        \"font\": \"Tahoma\",\n        \"fontsize\": \"14\",\n        \"bold\": true,\n        \"italic\": false,\n        \"underline\": false,\n        \"strike\": false\n    },\n    \"config\": {\n        \"script\": \"\"\n    },\n    \"label\": \"Неизменяемый текст\",\n    \"translations\": [\n        {              // переводы значения компонента\n            \"localeID\": \"c\",              // код локали\n            \"text\": \"Неизменяемый текст\", // значение компонента в указанной локали\n            \"editByUser\": true            // заполнялось пользователем\n        }, {\n            \"localeID\": \"ru\",\n            \"text\": \"Неизменяемый текст\",\n            \"editByUser\": true\n        }, {\n            \"localeID\": \"kk\",\n            \"text\": \"Өзгермейтін мәтін\",\n            \"editByUser\": true\n        }, {\n            \"localeID\": \"en\",\n            \"text\": \"Label\",\n            \"editByUser\": true\n        }\n    ]\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\":\"label-cmp\",\n    \"type\":\"label\",\n    \"label\":\"Неизменяемый текст\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nLabelModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nLabelView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"textbox-cmp\",                   // идентификатор компонента\n    \"type\": \"textbox\",                     // тип компонента\n    \"style\": {                             // стиль компонента\n        \"align\": \"center\",\n        \"font\": \"Courier New\",\n        \"fontsize\": \"12\",\n        \"bold\": true,\n        \"italic\": false,\n        \"underline\": false,\n        \"strike\": false,\n        \"height\": \"20\",\n        \"width\": \"200\"\n    },\n    \"config\": {                            // конфигурация компонента\n        \"read-only\": true,                   // заблокировать от изменений пользователем\n        \"script\": \"model.setValue('Ерлан');\" // скрипт компонента\n    },\n    \"required\": true                      // обязательное поле\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\":\"textbox-cmp\",\n    \"type\":\"textbox\",\n    \"value\":\"Ерлан\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nTextBoxModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nTextBoxView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"numericinput-cmp\",\n    \"type\": \"numericinput\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,         // заблокировать от изменений пользователем\n        \"RP_ACTIV\": true,           // ограничение десятичных знаков\n        \"RP_COUNT\": 2,              // количество десятичных знаков\n        \"DS_TYPE\": \"DOT\",           // разделитель дробной части. Возможные значения: DOT- точка, COMMA - запятая\n        \"ROUND\": true,              // действия с лишними десятичными знаками. true - округлять, false - отбрасывать\n        \"TS_ACTIVE\": true,          // разделитель тысяч\n        \"TS_VALUE\": \" \",            // значение разделителя тысяч\n        \"BV_ACTIV\": true,           // граничные значения\n        \"MAX\": \"10000\",             // верхняя граница значения\n        \"MIN\": \"-10000\",            // нижняя граница значения\n        \"script\": \"\"\n    },\n    \"required\": false\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"numericinput-cmp\",\n    \"type\": \"numericinput\",\n    \"value\": \"1 234.00\",        // текстовое представление\n    \"key\": \"1234.00\"            // числовое представление\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nNumericInputView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.\n```\n\n```\nNumericModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"textarea-cmp\",\n    \"type\": \"textarea\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,\n        \"add-space\": true,      // не удалять пробелы в начале строки\n        \"script\": \"\"\n    },\n    \"required\": false\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"textarea-cmp\",\n    \"type\": \"textarea\",\n    \"value\": \"Тут может быть\\nмногострочный текст\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nTextAreaView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.\n```\n\n```\nSimpleModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"htd-cmp\",\n    \"type\": \"htd\",\n    \"style\": {},\n    \"config\": {},\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"htd-cmp\",\n    \"type\": \"htd\",\n    \"value\": \"<span style=\\\"color: #0000ff;\\\"><strong>Привет!</strong></span>\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nSimpleModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nRichTextView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\nВыпадающий список с системным справочником в качестве элементов\n\n```\n{\n    \"id\": \"listbox-cmp\",\n    \"type\": \"listbox\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,\n        \"depends\": \"listbox-linked\",  // связь с компонентом\n        \"script\": \"\"\n    },\n    \"required\": false,\n    \"dataSource\": {                 // источник данных компонента (только для справочника)\n        \"type\": \"dict\",               // тип данных\n        \"dict\": \"year\",               // код справочника\n        \"key\": \"title\",               // код поля справочника для наименования элемента\n        \"value\": \"value\",             // код поля справочника для значения элемента\n        \"filter\": \"value\",            // код поля справочника для фильтра элемента\n        \"locale\": \"ru\"                // локаль справочника\n        }\n}\n\n```\n\nВыпадающий список со встроенным справочником\n\n```\n{\n    \"id\": \"listbox-linked\",\n    \"type\": \"listbox\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,\n        \"script\": \"\"\n    },\n    \"required\": false,\n    \"elements\": [\n        {              // элементы справочника\n            \"value\": \"2016\",          // значение элемента\n            \"label\": \"Обезьяна\",      // наименование элемента\n            \"filter\": \"\"              // фильтр элемента\n        }, {\n            \"value\": \"2015\",\n            \"label\": \"Коза\",\n            \"filter\": \"\"\n        }, {\n            \"value\": \"2014\",\n            \"label\": \"Лошадь\",\n            \"filter\": \"\"\n        }, {\n            \"value\": \"2013\",\n            \"label\": \"Змея\",\n            \"filter\": \"\"\n        }\n    ]\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"listbox-cmp\",\n    \"type\": \"listbox\",\n    \"value\": \"2014 год\",  // наименование выбранного элемента\n    \"key\": \"2014\"         // значение выбранного элемента\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nComboBoxModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nlistElements\n```\n\n[{value:«value1»,key:«key1»},…]массив всех элементов компонента\nне зависимо от фильтра\n\n```\n[{value : «value1», key : «key1»}, …]\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nlistCurrentElements\n```\n\n[{value:«value1»,key:«key1»},…]массив элементов компонента согласно\nфильтру, если таковой имеется, либо массив всех элементов\n\n```\n[{value : «value1», key : «key1»}, …]\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\ngetTextValue\n```\n\nПолучить наименования выбранных элементов\n\nРезультат: | Stringнаименование выбранного компонента\n\n```\nString\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\ngetValue\n```\n\nПолучить значения выбранных элементов\n\nРезультат: | [String]массив из одного элемента с выбранным значением\n\n```\n[String]\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nsetValue\n```\n\nВставить значение\n\nАргументы: | newValue(Array) – значение\n\n- newValue(Array) – значение\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nupdateModelData\n```\n\nОбновить данные текущих элементов компонента согласно фильтрам\n\n```\nAS.FORMS.\n```\n\n```\nComboBoxView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента дата/время выглядит следующим образом\n\n```\n{\n    \"id\": \"date-cmp\",\n    \"type\": \"date\",\n    \"style\": {},\n    \"config\": {\n        \"dateFormat\": \"${dd} ${monthed} ${yyyy}г.\",  // формат даты\n        \"read-only\": false,\n        \"fill-with-current\": true,                   // заполнять текущей датой/временем\n        \"locale\": \"ru\",                              // язык\n        \"dateFormatOld\": \"${yyyy}-${mm}-${dd}\",      // не используется (для обратной совместимости)\n        \"time-Enable\": true,                         // вводить\n        \"script\": \"\"\n    }\n}\n\n```\n\nМодель данных компонента дата/время\n\n```\n{\n    \"id\": \"date-cmp\",\n    \"type\": \"date\",\n    \"value\": \"01 сентября 2017г.\",  // значение согласно настроенному формату\n    \"key\": \"2017-09-01 09:00:00\"    // значение даты в формате «yyyy-MM-dd HH:mm:ss»\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nDateModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.DateModel.\n```\n\n```\ngetValue\n```\n\nПолучить значение компонента\n\nРезультат: | Stringдата в формате «yyyy-MM-dd HH:mm:ss»\n\n```\nString\n```\n\n```\nAS.FORMS.DateModel.\n```\n\n```\nsetValue\n```\n\nВставить значение\n\nАргументы: | newValue(String) – значение даты в формате «yyyy-MM-dd HH:mm:ss»\n\n- newValue(String) – значение даты в формате «yyyy-MM-dd HH:mm:ss»\n\n```\nAS.FORMS.\n```\n\n```\nDateView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.DateView.\n```\n\n```\nshowDatePicker\n```\n\nОтобразить календарь для ввода даты",
    "Описание компонента выбор вариантов выглядит следующим образом\n\nВыбор вариантов с системным справочником в качестве элементов.. code-block:: js\n\n{«id»: «check-dict»,\n«type»: «check»,\n«style»: {},\n«config»: {«read-only»: false,\n«script»: «»,\n«depends»: «»         // от какого компонента зависит},\n«required»: false,\n«dataSource»: {         // источник данных компонента (только для справочника)«type»: «dict»,       // тип данных\n«dict»: «year»,       // код справочника\n«key»: «title»,       // код поля справочника для наименования элемента\n«value»: «value»,     // код поля справочника для значения элемента\n«locale»: «ru»,       // локаль справочника\n«filter»: «ru»        // код поля справочника для фильтра}}\n\n«id»: «check-dict»,\n«type»: «check»,\n«style»: {},\n«config»: {\n\n«read-only»: false,\n«script»: «»,\n«depends»: «»         // от какого компонента зависит\n\n«read-only»: false,\n«script»: «»,\n«depends»: «»         // от какого компонента зависит\n\n},\n«required»: false,\n«dataSource»: {         // источник данных компонента (только для справочника)\n\n«type»: «dict»,       // тип данных\n«dict»: «year»,       // код справочника\n«key»: «title»,       // код поля справочника для наименования элемента\n«value»: «value»,     // код поля справочника для значения элемента\n«locale»: «ru»,       // локаль справочника\n«filter»: «ru»        // код поля справочника для фильтра\n\n«type»: «dict»,       // тип данных\n«dict»: «year»,       // код справочника\n«key»: «title»,       // код поля справочника для наименования элемента\n«value»: «value»,     // код поля справочника для значения элемента\n«locale»: «ru»,       // локаль справочника\n«filter»: «ru»        // код поля справочника для фильтра\n\n}\n\n}\n\nВыбор вариантов со встроенным справочником\n\n```\n{\n  \"id\": \"check-cmp\",\n  \"type\": \"check\",\n  \"style\": {},\n  \"config\": {\n    \"read-only\": false,\n    \"script\": \"\"\n  },\n  \"required\": false,\n  \"elements\": [{          // элементы справочника\n    \"value\": \"2016\",      // значение элемента\n    \"label\": \"Обезьяна\",  // наименование элемента\n    \"filter\": \"\"\n  }, {\n    \"value\": \"2015\",\n    \"label\": \"Коза\",\n    \"filter\": \"\"\n  }, {\n    \"value\": \"2014\",\n    \"label\": \"Лошадь\",\n    \"filter\": \"\"\n  }, {\n    \"value\": \"2013\",\n    \"label\": \"Змея\",\n    \"filter\": \"\"\n  }]\n}\n\n```\n\nМодель данных выбора вариантов\n\n```\n{\n  \"id\": \"check-cmp\",\n  \"type\": \"check\",\n  \"values\": [\"2014\", \"2015\"],       // значения выбранных элементов\n  \"keys\": [\"Лошадь\", \"Коза\"]  // наименования выбранных элементов\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nComboBoxModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nlistElements\n```\n\n[{value:«value1»,key:«key1»},…]массив всех элементов компонента\nне зависимо от фильтра\n\n```\n[{value : «value1», key : «key1»}, …]\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nlistCurrentElements\n```\n\n[{value:«value1»,key:«key1»},…]массив элементов компонента согласно\nфильтру, если таковой имеется, либо массив всех элементов\n\n```\n[{value : «value1», key : «key1»}, …]\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\ngetTextValue\n```\n\nПолучить наименования выбранных элементов\n\nРезультат: | Stringнаименования выбранных элементов, разделенные запятой\n\n```\nString\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\ngetTextValues\n```\n\nПолучить наименования выбранных элементов\n\nРезультат: | Array: наименования выбранных элементов\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\ngetValue\n```\n\nПолучить значения выбранных элементов\n\nРезультат: | Array: значения выбранных элементов\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nsetValue\n```\n\nВставить значение\n\nАргументы: | newValue(Array) – массив значений либо значение (автоматически преобразуется в массив из одного элемента)\n\n- newValue(Array) – массив значений либо значение (автоматически преобразуется в массив из одного элемента)\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nupdateModelData\n```\n\nОбновить данные текущих элементов компонента согласно фильтрам\n\n```\nAS.FORMS.\n```\n\n```\nCheckBoxView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\nВыбор вариантов с системным справочником в качестве элементов\n\n```\n{\n    \"id\": \"radio-dict\",\n    \"type\": \"radio\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,\n        \"script\": \"\"\n    },\n    \"required\": false,\n    \"dataSource\": {           // источник данных компонента (только для справочника)\n        \"type\": \"dict\",         // тип данных\n        \"dict\": \"year\",         // код справочника\n        \"key\": \"title\",         // код поля справочника для наименования элемента\n        \"value\": \"value\",       // код поля справочника для значения элемента\n        \"locale\": \"ru\"          // локаль справочника\n    }\n}\n\n```\n\nВыбор вариантов со встроенным справочником\n\n{\"id\":\"radio-cmp\",\"type\":\"radio\",\"style\":{},\"config\":{\"read-only\":false,\"script\":\"\"},\"required\":false,\"elements\":[{// элементы справочника\"value\":\"2016\",// значение элемента\"label\":\"Обезьяна\",// наименование элемента\"filter\":\"\"},{\"value\":\"2015\",\"label\":\"Коза\",\"filter\":\"\"},{\"value\":\"2014\",\"label\":\"Лошадь\",\"filter\":\"\"},{\"value\":\"2013\",\"label\":\"Змея\",\"filter\":\"\"}]}\n\n```\n{\n    \"id\": \"radio-cmp\",\n    \"type\": \"radio\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,\n        \"script\": \"\"\n    },\n    \"required\": false,\n    \"elements\": [\n        {          // элементы справочника\n            \"value\": \"2016\",      // значение элемента\n            \"label\": \"Обезьяна\",  // наименование элемента\n            \"filter\": \"\"\n        }, {\n            \"value\": \"2015\",\n            \"label\": \"Коза\",\n            \"filter\": \"\"\n        }, {\n            \"value\": \"2014\",\n            \"label\": \"Лошадь\",\n            \"filter\": \"\"\n        }, {\n            \"value\": \"2013\",\n            \"label\": \"Змея\",\n            \"filter\": \"\"\n        }\n    ]\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"radio-dict\",\n    \"type\": \"radio\",\n    \"value\": \"2014\",      // значение выбранного элемента\n    \"key\": \"2014 год\"     // наименование выбранного элемента\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nComboBoxModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nlistElements\n```\n\n[{value:«value1»,key:«key1»},…]массив всех элементов компонента\nне зависимо от фильтра\n\n```\n[{value : «value1», key : «key1»}, …]\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nlistCurrentElements\n```\n\n[{value:«value1»,key:«key1»},…]массив элементов компонента согласно\nфильтру, если таковой имеется, либо массив всех элементов\n\n```\n[{value : «value1», key : «key1»}, …]\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\ngetTextValue\n```\n\nПолучить наименования выбранных элементов\n\nРезультат: | Stringнаименования выбранных элементов, разделенных запятой\n\n```\nString\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\ngetValue\n```\n\nПолучить значения выбранных элементов\n\nРезультат: | [String]массив с единственным значением\n\n```\n[String]\n```\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\ndoSetValue\n```\n\nВставить значение\n\nАргументы: | newValue(String) – значение\n\n- newValue(String) – значение\n\n```\nAS.FORMS.ComboBoxModel.\n```\n\n```\nupdateModelData\n```\n\nОбновить данные текущих элементов компонента согласно фильтрам\n\n```\nAS.FORMS.\n```\n\n```\nRadioButtonView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"image-cmp\",\n    \"type\": \"image\",\n    \"style\": {},\n    \"config\": {\n        \"url\": \"asffile?uuid=4e61da62-5d43-493a-80a2-9fe7ef7b0e23\",\n        \"script\": \"\"\n    },\n    \"data\": {\n        \"id\": \"image-cmp\",\n        \"type\": \"image\"\n    }\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"image-cmp\",\n    \"type\": \"image\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nImageModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nImageView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"file-cmp\",\n    \"type\": \"file\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,\n        \"showFullPath\": true,   // отображать полный путь к файлу при загрузке из хранилища\n        \"showContent\": false,   // отображать содержимое загруженного файла\n        \"script\": \"\"\n    },\n    \"required\": false\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"file-cmp\",\n    \"type\": \"file\",\n    \"value\": \"tech_spec.pdf\",                       // имя файла\n    \"key\": \"bdc23ab9-0170-453e-9fee-6a5e001f7c12\",  // идентификатор файла в Хранилище\n    \"valueID\": \"Хранилище/Сотрудники/Матаев Ерлан\"  // путь к файлу\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nFileView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.\n```\n\n```\nFileModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"link-cmp\",\n    \"type\": \"link\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,\n        \"fill-with-current\": true,    // заполнять ссылкой на текущий документ\n        \"script\": \"\"\n    },\n    \"required\": false\n}\n\n```\n\nПримечание\n\nЗначение параметраkeyсостоит из надписи к ссылке и через «; »\n(с пробелом) опции, открывать ли ссылку в новом окне. например\n«http://www.arta.pro; true»\n\n```\nkey\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"link-cmp\",\n    \"type\": \"link\",\n    \"value\": \"http://arta.pro\",   // URL ссылки\n    \"key\": \"ARTA Software; true\"  // наименование ссылки\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.LinkModel.\n```\n\n```\nisOpenInNew\n```\n\nОткрывать ссылку в новом окне\n\nРезультат: | boolean\n\n```\nboolean\n```\n\n```\nAS.FORMS.LinkModel.\n```\n\n```\nsetValueFromInput\n```\n\nВставить значение\n\nАргументы: | newUrl(String) – URL ссылкиnewTitle(String) – наименование ссылкиnewOpenInNew(boolean) – открывать ссылку в новом окне\n\n- newUrl(String) – URL ссылки\n- newTitle(String) – наименование ссылки\n- newOpenInNew(boolean) – открывать ссылку в новом окне\n\n```\nAS.FORMS.\n```\n\n```\nLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"userlink-cmp\",\n    \"type\": \"entity\",\n    \"style\": {},\n    \"config\": {\n        \"entity\": \"users\",                            // тип данных\n        \"read-only\": false,                           // заблокировать от изменений пользователем\n        \"depends\": \"positionlink-cmp\",                // связь с компонентом\n        \"fill-with-current\": true,                    // заполнять создающим пользователем\n        \"custom\": true,                               // разрешать ввод произвольного текста\n        \"multi\": true,                                // позволять мультивыбор\n        \"groups\": true,                               // отображать группы\n        \"show-without-position\": true,                // отображать не назначенных на должность\n        \"editable-label\": true,                       // разрешать редактировать label выбранного элемента\n        \"customNameFormats\": {                        // изменить формат отображения ФИО в зависимости от языка системы\n            \"ru\": \"${l} ${f.short}.${p.short.dot}\",   // русский язык\n            \"kz\": \"${l} ${f.short}.${p.short.dot}\",   // казахский язык\n            \"en\": \"${l} ${f.short}.${p.short.dot}\"    // английский язык\n        },\n        \"script\": \"\"\n    }\n    \"required\": true\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"userlink-cmp\",\n    \"type\": \"entity\",\n    \"value\": \"syndevel s., DEVDEP, ARTA, Someone\",                                                    // значение компонента\n    \"key\": \"cbc93e4a-b3b6-4b5d-8b93-7692b32e3ceb;63e8d268-a135-4fa9-91d2-ed5d0024c93b;g-131;text-0\",  // список id выбранных пользователей, разделенных «;»\n    \"formatVersion\": \"V1\",\n    \"manualTags\": {\"63e8d268-a135-4fa9-91d2-ed5d0024c93b\": \"DEVDEP\"}                                  // пользователи, для которых были изменены названия вручную\n}\n\n```\n\nПримечаниеИдентификаторы могут иметь приставки:без приставки - пользовательg - группа (g-идентификатор_группы)text - произвольный текст (text-номер_просто_число)\n\nПримечание\n\nИдентификаторы могут иметь приставки:\n\n- без приставки - пользователь\n- g - группа (g-идентификатор_группы)\n- text - произвольный текст (text-номер_просто_число)\n\n```\nAS.FORMS.\n```\n\n```\nUserLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.UserLinkModel.\n```\n\n```\ngetSelectedIds\n```\n\nПолучить идентификаторы выбранных пользователей\n\nРезультат: | [String]\n\n```\n[String]\n```\n\n```\nAS.FORMS.UserLinkModel.\n```\n\n```\ngetValue\n```\n\nПолучить значение\n\nРезультат: | [object]: массив объектов{personID:\"идентификатор пользователя\",// обязательное полеpersonName:\"название пользователя\",// обязательное полеpositionName:\"название должности пользователя (если существует)\",customFields:{calendarColor:\"цвет статуса\",calendarStatusLabel:\"текст статуса\"}}\n\n```\n[object]\n```\n\n```\n{\n    personID: \"идентификатор пользователя\",      // обязательное поле\n    personName: \"название пользователя\",         // обязательное поле\n    positionName: \"название должности пользователя (если существует)\",\n    customFields: {\n        calendarColor: \"цвет статуса\",\n        calendarStatusLabel: \"текст статуса\"\n    }\n}\n\n```\n\n```\nAS.FORMS.UserLinkModel.\n```\n\n```\nsetValue\n```\n\nАргументы: | value(object) –объект, или массив объектов со следующей структурой{personID:\"идентификатор пользователя\",// обязательное полеpersonName:\"название пользователя\",// обязательное полеpositionName:\"название должности пользователя (если существует)\",customFields:{calendarColor:\"цвет статуса\",calendarStatusLabel:\"текст статуса\"}}\n\n- value(object) –объект, или массив объектов со следующей структурой{personID:\"идентификатор пользователя\",// обязательное полеpersonName:\"название пользователя\",// обязательное полеpositionName:\"название должности пользователя (если существует)\",customFields:{calendarColor:\"цвет статуса\",calendarStatusLabel:\"текст статуса\"}}\n\n```\n{\n    personID: \"идентификатор пользователя\",      // обязательное поле\n    personName: \"название пользователя\",         // обязательное поле\n    positionName: \"название должности пользователя (если существует)\",\n    customFields: {\n        calendarColor: \"цвет статуса\",\n        calendarStatusLabel: \"текст статуса\"\n    }\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nUserLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.UserLinkView.\n```\n\n```\nshowUserChooser\n```\n\nотображает диалог выбора пользователя\n\nОписание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"positionlink-cmp\",\n    \"type\": \"entity\",\n    \"style\": {},\n    \"config\": {\n        \"entity\": \"positions\",            // тип данных\n        \"read-only\": false,               // заблокировать от изменений пользователем\n        \"script\": \"\",                     // код скрипта\n        \"depends\": \"departmentlink-cmp\",  // связь с компонентом\n        \"locale\": \"kz\",                   // язык\n        \"fill-with-current\": true,        // заполнять первой должностью создающего пользователя\n        \"custom\": true,                   // разрешать ввод произвольного текста\n        \"editable-label\": true,           // разрешать редактировать label выбранного элемента\n        \"only-vacant\": true               // отображать только вакантные должности\n    },\n    \"required\": true\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"positionlink-cmp\",\n    \"type\": \"entity\",\n    \"value\": \"SDE III\",                                               // значение компонента\n    \"key\": \"ababf6ba-2c64-4f02-8490-898e8d8bd096\",                    // id выбранной должности\n    \"formatVersion\": \"V1\",\n    \"manualTags\": {\"ababf6ba-2c64-4f02-8490-898e8d8bd096\": \"SDE III\"} // должности, для которых были изменены названия вручную\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nPositionLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.PositionLinkModel.\n```\n\n```\ngetSelectedIds\n```\n\nПолучить идентификаторы выбранных должностей\n\nРезультат: | [String]\n\n```\n[String]\n```\n\n```\nAS.FORMS.PositionLinkModel.\n```\n\n```\ngetValue\n```\n\nПолучить значение\n\nРезультат: | [object]{elementID:\"идентификатор должности\",//обязательный элементelementName:\"название должности\",//обязательный элементdepartmentName:\"название подразделения, которому принадлежит должность\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n\n```\n[object]\n```\n\n```\n{\n    elementID: \"идентификатор должности\",            //обязательный элемент\n    elementName: \"название должности\",               //обязательный элемент\n    departmentName: \"название подразделения, которому принадлежит должность\",\n    status: \"текст статуса\",\n    statusColor: \"цвет статуса\"\n}\n\n```\n\n```\nAS.FORMS.PositionLinkModel.\n```\n\n```\nsetValue\n```\n\nАргументы: | value(object) –{elementID:\"идентификатор должности\",//обязательный элементelementName:\"название должности\",//обязательный элементdepartmentName:\"название подразделения, которому принадлежит должность\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n\n- value(object) –{elementID:\"идентификатор должности\",//обязательный элементelementName:\"название должности\",//обязательный элементdepartmentName:\"название подразделения, которому принадлежит должность\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n\n```\n{\n    elementID: \"идентификатор должности\",            //обязательный элемент\n    elementName: \"название должности\",               //обязательный элемент\n    departmentName: \"название подразделения, которому принадлежит должность\",\n    status: \"текст статуса\",\n    statusColor: \"цвет статуса\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nPositionLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\nОписание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"departmentlink-cmp\",\n    \"type\": \"entity\",\n    \"style\": {},\n    \"config\": {\n        \"entity\": \"departments\",          // тип данных\n        \"read-only\": false,               // заблокировать от изменений пользователем\n        \"script\": \"\",                     // код скрипта\n        \"depends\": \"departmentlink2-cmp\", // связь с компонентом\n        \"locale\": \"kz\",                   // язык\n        \"fill-with-current\": true,        // заполнять департаментом создающего пользователя\n        \"custom\": true,                   // разрешать ввод произвольного текста\n        \"editable-label\": true,           // разрешать редактировать label выбранного элемента\n        \"multi\": true                     // позволять мультивыбор\n    },\n    \"required\": true\n}\n\n```\n\n*Модель данных компонента *\n\n```\n{\n    \"id\": \"departmentlink-cmp\",\n    \"type\": \"entity\",\n    \"value\": \"ARTA;; Отдел Разработки\",                                        // значение компонента, в качестве разделителя наименований value используется «;; » (с пробелом после точек с запятой)\n    \"key\": \"1;cf4b8595-44e3-43b1-bd55-f30b0a1b03cb\",                           // список id выбранных подразделений, разделенных «;»\n    \"formatVersion\": \"V1\",\n    \"manualTags\": {\"cf4b8595-44e3-43b1-bd55-f30b0a1b03cb\": \"Отдел Разработки\"} // подразделения, для которых были изменены названия вручную\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nDepartmentLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.DepartmentLinkModel.\n```\n\n```\ngetSelectedIds\n```\n\nПолучить идентификаторы выбранных подразделений\n\nРезультат: | [String]\n\n```\n[String]\n```\n\n```\nAS.FORMS.DepartmentLinkModel.\n```\n\n```\ngetValue\n```\n\nПолучить значение\n\nРезультат: | [object]{departmentId:\"идентификатор подразделения\",// обязательное полеdepartmentName:\"название подразделения\",// обязательное полеparentName:\"название подразделения, которому принадлежит должность\",hasChildren:\"имеются ли дочерние подразделения\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n\n```\n[object]\n```\n\n```\n{\n    departmentId: \"идентификатор подразделения\",         // обязательное поле\n    departmentName: \"название подразделения\",            // обязательное поле\n    parentName: \"название подразделения, которому принадлежит должность\",\n    hasChildren: \"имеются ли дочерние подразделения\",\n    status: \"текст статуса\",\n    statusColor: \"цвет статуса\"\n}\n\n```\n\n```\nAS.FORMS.DepartmentLinkModel.\n```\n\n```\nsetValue\n```\n\nАргументы: | value(object) –{departmentId:\"идентификатор подразделения\",// обязательное полеdepartmentName:\"название подразделения\",// обязательное полеparentName:\"название подразделения, которому принадлежит должность\",hasChildren:\"имеются ли дочерние подразделения\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n\n- value(object) –{departmentId:\"идентификатор подразделения\",// обязательное полеdepartmentName:\"название подразделения\",// обязательное полеparentName:\"название подразделения, которому принадлежит должность\",hasChildren:\"имеются ли дочерние подразделения\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n\n```\n{\n    departmentId: \"идентификатор подразделения\",         // обязательное поле\n    departmentName: \"название подразделения\",            // обязательное поле\n    parentName: \"название подразделения, которому принадлежит должность\",\n    hasChildren: \"имеются ли дочерние подразделения\",\n    status: \"текст статуса\",\n    statusColor: \"цвет статуса\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nDepartmentLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента счетчик выглядит следующим образом\n\n```\n{\n    \"id\": \"counter-cmp\",\n    \"type\": \"counter\",\n    \"style\": {},\n    \"config\": {\n      \"counter\": \"6e6c5cb3-a48e-4b83-a9b1-1def01c4f213\",  // идентификатор шаблона номера\n      \"script\": \"\"\n    }\n}\n\n```\n\nМодель данных выбора вариантов\n\n{\"id\":\"counter-cmp\",\"type\":\"counter\",\"value\":\"44-25.10.2017\"}\n\n```\n{\n  \"id\": \"counter-cmp\",\n  \"type\": \"counter\",\n  \"value\": \"44-25.10.2017\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nSimpleModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nTextView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\nТип данных лист подписей\n\n```\n{\n    \"id\": \"signlist-cmp\",\n    \"type\": \"signlist\",\n    \"style\": {},\n    \"config\": {\n        \"locale\": \"ru\",                   // язык\n        \"type\": -1,                       // тип данных\n        \"fields\": [\n            {                      // список отображаемых столбцов\n                \"field\": \"number\",              // идентификатор столбца\n                \"number\": 1,                    // порядковый номер столбца\n                \"ru\": \"№ п/п\",                  // заголовок столбца на русском\n                \"kz\": \"№ рет бойынша\",          // заголовок столбца на казахском\n                \"en\": \"№\"                       // заголовок столбца на английском\n            }, {\n                \"field\": \"full_name\",\n                \"number\": 2,\n                \"ru\": \"Фамилия И.О.\",\n                \"kz\": \"Аты-жөні\",\n                \"en\": \"Full name\"\n            }, {\n                \"field\": \"full_name_current\",\n                \"number\": 2,\n                \"ru\": \"Фамилия И.О.\",\n                \"kz\": \"Аты-жөні\",\n                \"en\": \"Full name\"\n            }, {\n                \"field\": \"full_name_saved\",\n                \"number\": 2,\n                \"ru\": \"Фамилия И.О.\",\n                \"kz\": \"Аты-жөні\",\n                \"en\": \"Full name\"\n            }, {\n                \"field\": \"position\",\n                \"number\": 3,\n                \"ru\": \"Должность\",\n                \"kz\": \"Лауазымы\",\n                \"en\": \"Position\"\n            }, {\n                \"field\": \"position_current\",\n                \"number\": 3,\n                \"ru\": \"Должность\",\n                \"kz\": \"Лауазымы\",\n                \"en\": \"Position\"\n            }, {\n                \"field\": \"position_saved\",\n                \"number\": 3,\n                \"ru\": \"Должность\",\n                \"kz\": \"Лауазымы\",\n                \"en\": \"Position\"\n            }, {\n                \"field\": \"date\",\n                \"number\": 4,\n                \"ru\": \"Дата\",\n                \"kz\": \"Күні\",\n                \"en\": \"Date\"\n            }, {\n                \"field\": \"signature_type\",\n                \"number\": 5,\n                \"ru\": \"Действие\",\n                \"kz\": \"Іс-әрекет\",\n                \"en\": \"Action\"\n            }, {\n                \"field\": \"result\",\n                \"number\": 6,\n                \"ru\": \"Результат действия\",\n                \"kz\": \"Іс-әрекет нәтижесі\",\n                \"en\": \"Action result\"\n            }, {\n                \"field\": \"comment\",\n                \"number\": 7,\n                \"ru\": \"Комментарий\",\n                \"kz\": \"Түсініктеме\",\n                \"en\": \"Comment\"\n            }, {\n                \"field\": \"signature\",\n                \"number\": 8,\n                \"ru\": \"Тип подписи\",\n                \"kz\": \"Қолтаңба түрі\",\n                \"en\": \"Signature type\"\n            }\n        ],\n        \"script\": \"\"\n    }\n}\n\n```\n\nТип данных лист согласований\n\n```\n{\n    \"id\": \"signlist-cmp\",\n    \"type\": \"signlist\",\n    \"style\": {},\n    \"config\": {\n        \"locale\": \"ru\",                   // язык\n        \"type\": 0,                        // тип данных\n        \"fields\": [\n            {                      // список отображаемых столбцов\n                \"field\": \"number\",              // идентификатор столбца\n                \"number\": 1,                    // порядковый номер столбца\n                \"ru\": \"№ п/п\",                  // заголовок столбца на русском\n                \"kz\": \"№ рет бойынша\",          // заголовок столбца на казахском\n                \"en\": \"№\"                       // заголовок столбца на английском\n            }, {\n                \"field\": \"full_name\",\n                \"number\": 2,\n                \"ru\": \"ФИО согласующего\",\n                \"kz\": \"Келісімдеушінің аты-жөні\",\n                \"en\": \"Consenter full name\"\n            }, {\n                \"field\": \"position\",\n                \"number\": 3,\n                \"ru\": \"Должность согласующего\",\n                \"kz\": \"Келісімдеушінің лауазымы\",\n                \"en\": \"Consenter position\"\n            }, {\n                \"field\": \"consent_date\",\n                \"number\": 4,\n                \"ru\": \"Дата согласования\",\n                \"kz\": \"Келісімдеу күні\",\n                \"en\": \"Consent date\"\n            }, {\n                \"field\": \"consent_result\",\n                \"number\": 5,\n                \"ru\": \"Результат согласования\",\n                \"kz\": \"Келісімдеу нәтижесі\",\n                \"en\": \"Consent result\"\n            }, {\n                \"field\": \"consent_comment\",\n                \"number\": 6,\n                \"ru\": \"Комментарий согласующего\",\n                \"kz\": \"Келісімдеушінің түсініктемесі\",\n                \"en\": \"Consenter comment\"\n            }\n        ],\n        \"script\": \"\"\n    }\n}\n\n```\n\nТип данных лист утверждений\n\n```\n{\n    \"id\": \"signlist-cmp\",\n    \"type\": \"signlist\",\n    \"style\": {},\n    \"config\": {\n        \"locale\": \"ru\",                   // язык\n        \"type\": 1,                        // тип данных\n        \"fields\": [\n            {                      // список отображаемых столбцов\n                \"field\": \"number\",              // идентификатор столбца\n                \"number\": 1,                    // порядковый номер столбца\n                \"ru\": \"№ п/п\",                  // заголовок столбца на русском\n                \"kz\": \"№ рет бойынша\",          // заголовок столбца на казахском\n                \"en\": \"№\"                       // заголовок столбца на английском\n            }, {\n                \"field\": \"full_name\",\n                \"number\": 2,\n                \"ru\": \"ФИО утверждающего\",\n                \"kz\": \"Бекітушінің аты-жөні\",\n                \"en\": \"Approvaler full name\"\n            }, {\n                \"field\": \"position\",\n                \"number\": 3,\n                \"ru\": \"Должность утверждающего\",\n                \"kz\": \"Бекітушінің лауазымы\",\n                \"en\": \"Approvaler position\"\n            }, {\n                \"field\": \"approval_date\",\n                \"number\": 4,\n                \"ru\": \"Дата утверждения\",\n                \"kz\": \"Бекіту күні\",\n                \"en\": \"Approval date\"\n            }, {\n                \"field\": \"approval_result\",\n                \"number\": 5,\n                \"ru\": \"Результат утверждения\",\n                \"kz\": \"Бекіту нәтижесі\",\n                \"en\": \"Approval result\"\n            }, {\n                \"field\": \"approval_comment\",\n                \"number\": 6,\n                \"ru\": \"Комментарий утверждающего\",\n                \"kz\": \"Бекітушінің түсініктемесі\",\n                \"en\": \"Approvaler comment\"\n            }\n        ],\n        \"script\": \"\"\n    }\n}\n\n```\n\nТип данных лист ознакомления\n\n```\n{\n    \"id\": \"signlist-cmp\",\n    \"type\": \"signlist\",\n    \"style\": {},\n    \"config\": {\n    \"locale\": \"ru\",                   // язык\n    \"type\": 2,                        // тип данных\n    \"fields\": [\n        {                      // список отображаемых столбцов\n            \"field\": \"number\",              // идентификатор столбца\n            \"number\": 1,                    // порядковый номер столбца\n            \"ru\": \"№ п/п\",                  // заголовок столбца на русском\n            \"kz\": \"№ рет бойынша\",          // заголовок столбца на казахском\n            \"en\": \"№\"                       // заголовок столбца на английском\n        }, {\n            \"field\": \"full_name\",\n            \"number\": 2,\n            \"ru\": \"Фамилия И.О.\",\n            \"kz\": \"Танысушының аты-жөні\",\n            \"en\": \"Acquaintancer full name\"\n        }, {\n            \"field\": \"position\",\n            \"number\": 3,\n            \"ru\": \"Должность\",\n            \"kz\": \"Танысушының лауазымы\",\n            \"en\": \"Acquaintancer position\"\n        }, {\n            \"field\": \"acquaintance_date\",\n            \"number\": 4,\n            \"ru\": \"Дата ознакомления\",\n            \"kz\": \"Танысу күні\",\n            \"en\": \"Acquaintance date\"\n        }, {\n            \"field\": \"acquaintance_result\",\n            \"number\": 5,\n            \"ru\": \"Результат ознакомления\",\n            \"kz\": \"Танысу нәтижесі\",\n            \"en\": \"Acquaintance result\"\n        }\n    ],\n    \"script\": \"\"\n    }\n}\n\n```\n\nМодель данных компонента\n\nВниманиеДанный компонент не имеет данных, а только отображает\nинформацию из документа согласно настройкам компонента.\n\nВнимание\n\nДанный компонент не имеет данных, а только отображает\nинформацию из документа согласно настройкам компонента.\n\n```\nAS.FORMS.\n```\n\n```\nSimpleModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nSignListView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"resolutionlist-cmp\",\n    \"type\": \"resolutionlist\",\n    \"style\": {},\n    \"config\": {\n    \"locale\": \"ru\",               // язык\n    \"script\": \"\"\n    }\n}\n\n```\n\nМодель данных компонента\n\nВниманиеДанный компонент не имеет данных, а только отображает\nинформацию из документа согласно настройкам компонента.\n\nВнимание\n\nДанный компонент не имеет данных, а только отображает\nинформацию из документа согласно настройкам компонента.\n\n```\nAS.FORMS.\n```\n\n```\nSimpleModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nResolutionListView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"processlist-cmp\",\n    \"type\": \"processlist\",\n    \"style\": {},\n    \"config\": {\n        \"locale\": \"ru\",           // язык\n        \"script\": \"\"\n    }\n}\n\n```\n\nВниманиеДанный компонент не имеет данных, а только отображает\nинформацию из документа согласно настройкам компонента.\n\nВнимание\n\nДанный компонент не имеет данных, а только отображает\nинформацию из документа согласно настройкам компонента.\n\n```\nAS.FORMS.\n```\n\n```\nSimpleModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nProcessExecutionView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента ссылка на документ выглядит следующим образом\n\n```\n{\n    \"id\": \"doclink-cmp\",\n    \"type\": \"doclink\",\n    \"style\": {},\n    \"config\": {\n    \"read-only\": false,                                   // заблокировать от изменений пользователем\n    \"locale\": \"ru\",                                       // язык\n    \"script\": \"\",\n    \"format\": \"${document.author} - ${document.summary}\"  // форматная строка\n    },\n    \"required\": false\n}\n\n```\n\nМодель данных компонента ссылка на документ\n\n```\n{\n    \"id\": \"doclink-cmp\",\n    \"type\": \"doclink\",\n    \"value\": \"be1e7ef1-dbd7-4dfc-8c86-66c1d3e4eb05\" // идентификатор документа\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nDocLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```\n\n```\nAS.FORMS.\n```\n\n```\nDocLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"repeater-cmp\",\n    \"type\": \"repeater\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,     // заблокировать от изменений пользователем\n        \"locale\": \"ru\",         // язык\n        \"script\": \"\"\n    },\n    \"required\": false\n}\n\n```\n\nМодель данных компонента\n\nФормат данных для значения «По дням недели»\n\n{\"id\":\"repeater-cmp\",\"type\":\"repeater\",\"value\":\"По дням недели: Понедельник, Среда, Пятница\",// значение состоит из типа значения («По дням недели») и через «: » список полных названий дней недели, разделенных «, »\"key\":\"1|1.0;3.0;5.0;\"// значение состоит из типа значения (1 - это по дням недели) и через «|» список значений, разделенных «;», каждое значение в формате порядковый_номер_дня_недели.0}\n\n```\n{\n    \"id\": \"repeater-cmp\",\n    \"type\": \"repeater\",\n    \"value\": \"По дням недели: Понедельник, Среда, Пятница\", // значение состоит из типа значения («По дням недели») и через «: » список полных названий дней недели, разделенных «, »\n    \"key\": \"1|1.0;3.0;5.0;\"                                 // значение состоит из типа значения (1 - это по дням недели) и через «|» список значений, разделенных «;», каждое значение в формате порядковый_номер_дня_недели.0\n}\n\n```\n\nФормат данных для значения «По дням месяца»\n\n{\"id\":\"repeater-cmp\",\"type\":\"repeater\",\"value\":\"По дням месяца: 1, 15, 30\",// значение состоит из типа значения («По дням месяца») и через «: » список дней месяца, разделенных «, »\"key\":\"2|1.0;15.0;30.0;\"// значение состоит из типа значения (2 - это по дням месяца) и через «|» список значений, разделенных «;», каждое значение в формате день_месяца.0}\n\n```\n{\n    \"id\": \"repeater-cmp\",\n    \"type\": \"repeater\",\n    \"value\": \"По дням месяца: 1, 15, 30\", // значение состоит из типа значения («По дням месяца») и через «: » список дней месяца, разделенных «, »\n    \"key\": \"2|1.0;15.0;30.0;\"             // значение состоит из типа значения (2 - это по дням месяца) и через «|» список значений, разделенных «;», каждое значение в формате день_месяца.0\n}\n\n```\n\nФормат данных для значения «Ежегодно»\n\n{\"id\":\"repeater-cmp\",\"type\":\"repeater\",\"value\":\"Ежегодно: 1 Октябрь, 31 Декабрь\",// значение состоит из типа значения («Ежегодно») и через «: » список дней года, разделенных «, », каждое значение в формате номер_месяца.номер_дня\"key\":\"4|1.10;31.12;\"// значение состоит из типа значения (4 - это ежегодно) и через «|» список значений, разделенных «; », каждое значение в формате номер_дня.номер_месяца}\n\n```\n{\n    \"id\": \"repeater-cmp\",\n    \"type\": \"repeater\",\n    \"value\": \"Ежегодно: 1 Октябрь, 31 Декабрь\", // значение состоит из типа значения («Ежегодно») и через «: » список дней года, разделенных «, », каждое значение в формате номер_месяца.номер_дня\n    \"key\": \"4|1.10;31.12;\"                      // значение состоит из типа значения (4 - это ежегодно) и через «|» список значений, разделенных «; », каждое значение в формате номер_дня.номер_месяца\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nRepeatPeriodModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.RepeatPeriodModel.\n```\n\n```\ntype\n```\n\nТип периода (0 - нет, 1 - по дням недели, 2 - по дням месяца, 4 - ежегодно)\n\n```\nAS.FORMS.RepeatPeriodModel.\n```\n\n```\ngetTypeText\n```\n\nПолучить текстовую расшифровку выбранного типа\n\nРезультат: | String\n\n```\nString\n```\n\n```\nAS.FORMS.RepeatPeriodModel.\n```\n\n```\ngetValue\n```\n\nПолучить значение компонента\n\nРезультат: | [String]массив элементов согласно типу, например [«1.10», «31.12»]\n\n```\n[String]\n```\n\n```\nAS.FORMS.RepeatPeriodModel.\n```\n\n```\nsetValue\n```\n\nЗадать значение\n\nАргументы: | newValue(String) – строка вида:4|1.4;11.5;12.7;30.9\n\n- newValue(String) – строка вида:4|1.4;11.5;12.7;30.9\n\n```\n4|1.4;11.5;12.7;30.9\n```\n\n```\nAS.FORMS.RepeatPeriodModel.\n```\n\n```\nsetValueFromInput\n```\n\nЗадать значение\n\nАргументы: | newType(Number) – тип периодаnewValues(array) – массив строк согласно типу, например [«4.1», «5.11», «7.12», «9.30»]\n\n- newType(Number) – тип периода\n- newValues(array) – массив строк согласно типу, например [«4.1», «5.11», «7.12», «9.30»]\n\n```\nAS.FORMS.\n```\n\n```\nRepeatPeriodView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"projectlink-cmp\",\n    \"type\": \"projectlink\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,         // заблокировать от изменений пользователем\n        \"locale\": \"ru\",             // язык\n        \"script\": \"\"\n    },\n    \"required\": false\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"projectlink-cmp\",\n    \"type\": \"projectlink\",\n    \"value\": \"Портфель: Департамент Развития Технологии\", // наименование проекта/портфеля\n    \"key\": \"37dd8c8c-6116-4288-8f24-0567dbe9f492\",        // идентификатор проекта/портфеля\n    \"valueID\": \"37dd8c8c-6116-4288-8f24-0567dbe9f492\"     // идентификатор проекта/портфеля\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nProjectLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.ProjectLinkModel.\n```\n\n```\ngetValue\n```\n\nПолучить идентификатор выбранного проекта или портфеля\n\nРезультат: | Stringидентификатор проекта/портфеля\n\n```\nString\n```\n\n```\nAS.FORMS.ProjectLinkModel.\n```\n\n```\nsetValue\n```\n\nЗадать значение\n\nАргументы: | newValue(String) – идентификатор проекта/портфеля, либо null\n\n- newValue(String) – идентификатор проекта/портфеля, либо null\n\n```\nAS.FORMS.ProjectLinkModel.\n```\n\n```\nsetValueFromInput\n```\n\nЗадать значение\n\nАргументы: | newValue(object) –{\"actionID\":\"идентификатор проекта/портфеля\",\"name\":\"наименование проекта/портфеля\",\"elementType\":128// 128 - портфель, 256 - проект}\n\n- newValue(object) –{\"actionID\":\"идентификатор проекта/портфеля\",\"name\":\"наименование проекта/портфеля\",\"elementType\":128// 128 - портфель, 256 - проект}\n\n```\n{\n    \"actionID\": \"идентификатор проекта/портфеля\",\n    \"name\": \"наименование проекта/портфеля\",\n    \"elementType\": 128  // 128 - портфель, 256 - проект\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nProjectLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"reglink-cmp\",\n    \"type\": \"reglink\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,                                   // заблокировать от изменений пользователем\n        \"dateFormat\": \"e8384cb8-cd06-4e64-8d15-a73299c381a4\", // идентификатор реестра на который ссылается компонент\n        \"CollationGroup\": \"72c15e66bd47000\",                  // идентификатор сопоставления\n        \"fillWithParent\": true,                               // заполнять ссылкой на родительскую запись реестра\n        \"script\": \"\"\n    },\n    \"required\": false\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"reglink-cmp\",\n    \"type\": \"reglink\",\n    \"value\": \"#0959/130516-Запись реестра\",             // значение компонента (значащее содержимое через «-»)\n    \"key\": \"87c91a10-f9b1-11e6-ab54-121d80036b96\",      // идентификатор документа реестра\n    \"valueID\": \"87c91a10-f9b1-11e6-ab54-121d80036b96\",\n    \"username\": \"Смирнов Олег Александрович\",           // пользователь, который заполнил компонент\n    \"userID\": \"aabb46a4-a8ef-4cd8-a817-4f555857a1d1\"    // идентификатор пользователя, который заполнил компонент\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nRegistryLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.RegistryLinkModel.\n```\n\n```\ngetRegistryID\n```\n\nПолучить идентификатор реестра на который ссылается компонент\n\nРезультат: | Stringидентификатор реестра\n\n```\nString\n```\n\n```\nAS.FORMS.RegistryLinkModel.\n```\n\n```\ngetValue\n```\n\nПолучить идентификатор выбранного документа реестра\n\nРезультат: | Stringидентификатор документа реестра\n\n```\nString\n```\n\n```\nAS.FORMS.RegistryLinkModel.\n```\n\n```\nsetValue\n```\n\nЗадать значение\n\nАргументы: | newValue(String) – идентификатор документа реестра\n\n- newValue(String) – идентификатор документа реестра\n\n```\nAS.FORMS.\n```\n\n```\nRegistryLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"personlink-cmp\",\n    \"type\": \"personlink\",\n    \"style\": {},\n    \"config\": {}\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"personlink-cmp\",\n    \"type\": \"personlink\",\n    \"value\": \"Фамилия Имя Отчество (Организация)\",        // для организации \"Организация (Адрес)\"\n    \"key\": \"0:1e4fc64c-4f59-4b9f-8418-9691e983340e\",      // тип:идентификатор контакта в адресной книге\n    \"valueID\": \"0:1e4fc64c-4f59-4b9f-8418-9691e983340e\"\n}\n\n```\n\nПримечаниеЦифра, предваряющая идентификатор, означает тип контакта: 0 - люди, 1 - организация.\n\nПримечание\n\nЦифра, предваряющая идентификатор, означает тип контакта: 0 - люди, 1 - организация.\n\n```\nAS.FORMS.\n```\n\n```\nAddressLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.AddressLinkModel.\n```\n\n```\ngetValue\n```\n\nПолучить идентификатор выбранного контакта в адресной книге\n\nРезультат: | Stringидентификатор контакта в адресной книге\n\n```\nString\n```\n\n```\nAS.FORMS.AddressLinkModel.\n```\n\n```\nsetValue\n```\n\nЗадать значение\n\nАргументы: | newValue(String) – идентификатор контакта в адресной книге\n\n- newValue(String) – идентификатор контакта в адресной книге\n\n```\nAS.FORMS.AddressLinkModel.\n```\n\n```\nsetValueFromInput\n```\n\nЗадать значение\n\nАргументы: | newValue(String) – идентификаторnewTextValue(String) – подписьnewType(Number) – тип\n\n- newValue(String) – идентификатор\n- newTextValue(String) – подпись\n- newType(Number) – тип\n\n```\nAS.FORMS.\n```\n\n```\nAddressLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента свойства документа выглядит следующим образом\n\n```\n{\n    \"id\": \"docnumber-cmp\",\n    \"type\": \"docnumber\",\n    \"style\": {},\n    \"config\": {\n        \"locale\": \"ru\",           // язык\n        \"field\": \"author\",        // тип данных\n        \"script\": \"\"\n    }\n}\n\n```\n\nПримечание\n\nТип данных (полеfield) может принимать следующие значения:\n\n```\nfield\n```\n\n- number: номер документа\n- subject: краткое содержание\n- createDate: дата создания\n- author: автор\n- reg_date: дата регистрации\n- doc_type: тип документа\n- registry: реестр\n\n```\nnumber\n```\n\n```\nsubject\n```\n\n```\ncreateDate\n```\n\n```\nauthor\n```\n\n```\nreg_date\n```\n\n```\ndoc_type\n```\n\n```\nregistry\n```\n\nМодель данных компонента свойства документа\n\n```\n{\n    \"id\": \"docnumber-cmp\",\n    \"type\": \"docnumber\",\n    \"value\": \"#10-doc\"\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nDocAttributeModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.\n```\n\n```\nDocAttributeView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "Описание компонента выглядит следующим образом\n\n```\n{\n    \"id\": \"filelink-cmp\",\n    \"type\": \"filelink\",\n    \"style\": {},\n    \"config\": {\n        \"read-only\": false,           // заблокировать от изменений пользователем\n        \"open-in-new-window\": true,   // открывать в отдельном окне\n        \"script\": \"\"\n    },\n    \"required\": false\n}\n\n```\n\nМодель данных компонента\n\n```\n{\n    \"id\": \"filelink-cmp\",\n    \"type\": \"filelink\",\n    \"value\": \"Cписок корпоративных номеров.PDF\",    // наименование файла\n    \"key\": \"b692f647-5b79-4cfc-bfb6-0477df855046\"   // идентификатор файла в Хранилище\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nFileLinkModel\n```\n\nМодель компонента, наследуетAS.FORMS.Model()\n\n```\nAS.FORMS.Model()\n```\n\n```\nAS.FORMS.FileLinkModel.\n```\n\n```\ngetValue\n```\n\nПолучить значение\n\nРезультат: | object{\"identifier\":\"идентификатор файла\",\"name\":\"наименование файла\"}\n\n```\nobject\n```\n\n```\n{\n    \"identifier\": \"идентификатор файла\",\n    \"name\": \"наименование файла\"\n}\n\n```\n\n```\nAS.FORMS.FileLinkModel.\n```\n\n```\nsetValue\n```\n\nЗадать значение\n\nАргументы: | newValue(object) –{\"identifier\":\"идентификатор файла\",\"name\":\"наименование файла\",}\n\n- newValue(object) –{\"identifier\":\"идентификатор файла\",\"name\":\"наименование файла\",}\n\n```\n{\n    \"identifier\": \"идентификатор файла\",\n    \"name\": \"наименование файла\",\n}\n\n```\n\n```\nAS.FORMS.\n```\n\n```\nFileLinkView\n```\n\nОтображение компонента, наследуетAS.FORMS.View()\n\n```\nAS.FORMS.View()\n```",
    "```\nAS.\n```\n\n```\nSERVICES\n```\n\nФункции проигрывателя форм, которые можно использовать или переопределять при разработке приложений.\n\nПодсказкаПри разработке мобильного приложения, которое использует проигрыватель форм,\nхорошей практикой будет заменить вызов стандартных диалогов на нативные.\n\nПодсказка\n\nПри разработке мобильного приложения, которое использует проигрыватель форм,\nхорошей практикой будет заменить вызов стандартных диалогов на нативные.\n\nПредупреждение\n\nПри переопределении данных функций будет переопределено базовое поведение приложения,\nвсех соответствующих компонентов.\nНапример, переопределениеshowDepartmentChooserDialog()заменит диалог у всех\nкомпонентов выбора подразделения на форме.\n\n```\nshowDepartmentChooserDialog()\n```\n\n```\nAS.\n```\n\n```\nshowDatePicker\n```\n\nПоказать компонент выбора даты\n\nАргументы: | value(Date) – дата, которая будет отмечена как выбраннаяanchor(HTMLElement) – якорный компонент, к которому следует привязать компонент выбора датыinput(HTMLElement) – компонент, которому будет передан фокус ввода после выбора датыcallback(Function) – функция обратного вызова. В функцию будет\nпередан один параметр - выбранная дата, типDate\n\n- value(Date) – дата, которая будет отмечена как выбранная\n- anchor(HTMLElement) – якорный компонент, к которому следует привязать компонент выбора даты\n- input(HTMLElement) – компонент, которому будет передан фокус ввода после выбора даты\n- callback(Function) – функция обратного вызова. В функцию будет\nпередан один параметр - выбранная дата, типDate\n\n```\nDate\n```\n\nПример использования AS.SERVICES.showDatePicker\n\n```\nshowDepartmentChooserDialog\n```\n\nПоказать стандартный диалог выбора подразделения\n\nАргументы: | values(Array) –список выбранных элементов, каждый элемент имет следующую структуру{departmentId:\"идентификатор подразделения\",// обязательное полеdepartmentName:\"название подразделения\",// обязательное полеparentName:\"название подразделения, которому принадлежит должность\",hasChildren:\"имеются ли дочерние подразделения\",status:\"текст статуса\",statusColor:\"цвет статуса\"}multiSelectable(boolean) – позволять множественный выборfilterUserID(String) – идентификатор пользователя для фильтрации элементовfilterPositionID(String) – идентификатор должности для фильтрации элементовfilterDepartmentID(String) – идентификатор подразделения для фильтрации элементовfilterChildDepartmentID(String) – идентификатор дочернего подразделения для фильтрации элементовlocale(String) – локаль диалогаhandler(Function) – функция обратного вызова, в которую будет передан\nмассив выбранных элементов, в таком же формате как и передается в метод\n\n- values(Array) –список выбранных элементов, каждый элемент имет следующую структуру{departmentId:\"идентификатор подразделения\",// обязательное полеdepartmentName:\"название подразделения\",// обязательное полеparentName:\"название подразделения, которому принадлежит должность\",hasChildren:\"имеются ли дочерние подразделения\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n- multiSelectable(boolean) – позволять множественный выбор\n- filterUserID(String) – идентификатор пользователя для фильтрации элементов\n- filterPositionID(String) – идентификатор должности для фильтрации элементов\n- filterDepartmentID(String) – идентификатор подразделения для фильтрации элементов\n- filterChildDepartmentID(String) – идентификатор дочернего подразделения для фильтрации элементов\n- locale(String) – локаль диалога\n- handler(Function) – функция обратного вызова, в которую будет передан\nмассив выбранных элементов, в таком же формате как и передается в метод\n\n```\n{\n    departmentId: \"идентификатор подразделения\",         // обязательное поле\n    departmentName: \"название подразделения\",            // обязательное поле\n    parentName: \"название подразделения, которому принадлежит должность\",\n    hasChildren: \"имеются ли дочерние подразделения\",\n    status: \"текст статуса\",\n    statusColor: \"цвет статуса\"\n}\n\n```\n\n```\nshowDropDown\n```\n\nПоказать всплывающее окно с выбором элементов\n\nАргументы: | values(Array) –массив элементов списка, каждый элемент имет следующую структуру{value:\"значение\",title:\"подпись\",selected:true}anchor(HTMLElement) – якорный компонент, к которому следует привязать всплывающее окноminWidth(Number) – минимальная ширина всплывающего окна (если не задано, то ширина будет высчитываться исходя из едемента anchor)callback(Function) – функция обратного вызова, в которую будет передано выбранное значениеString\n\n- values(Array) –массив элементов списка, каждый элемент имет следующую структуру{value:\"значение\",title:\"подпись\",selected:true}\n- anchor(HTMLElement) – якорный компонент, к которому следует привязать всплывающее окно\n- minWidth(Number) – минимальная ширина всплывающего окна (если не задано, то ширина будет высчитываться исходя из едемента anchor)\n- callback(Function) – функция обратного вызова, в которую будет передано выбранное значениеString\n\n```\n{\n    value: \"значение\",\n    title: \"подпись\",\n    selected: true\n}\n\n```\n\n```\nString\n```\n\nПример использования AS.SERVICES.showDropDown\n\n```\nshowPositionChooserDialog\n```\n\nПоказать стандартный диалог выбора должности\n\nАргументы: | values(Object) –список выбранных элементов{elementID:\"идентификатор должности\",//обязательный элементelementName:\"название должности\",//обязательный элементdepartmentName:\"название подразделения, которому принадлежит должность\",status:\"текст статуса\",statusColor:\"цвет статуса\"}multiSelect(boolean) – позволять множественный выборfilterUserId(String) – идентификатор пользователя для фильтрации элементовfilterDepartmentId(String) – идентификатор подразделения для фильтрации элементовshowVacant(boolean) – отобразить только вакантные должностиlocale(String) – локаль диалогаhandler(Function) – функция обратного вызова, в которую будет передан\nмассив выбранных элементов, в таком же формате как и передается в метод\n\n- values(Object) –список выбранных элементов{elementID:\"идентификатор должности\",//обязательный элементelementName:\"название должности\",//обязательный элементdepartmentName:\"название подразделения, которому принадлежит должность\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n- multiSelect(boolean) – позволять множественный выбор\n- filterUserId(String) – идентификатор пользователя для фильтрации элементов\n- filterDepartmentId(String) – идентификатор подразделения для фильтрации элементов\n- showVacant(boolean) – отобразить только вакантные должности\n- locale(String) – локаль диалога\n- handler(Function) – функция обратного вызова, в которую будет передан\nмассив выбранных элементов, в таком же формате как и передается в метод\n\n```\n{\n    elementID: \"идентификатор должности\",            //обязательный элемент\n    elementName: \"название должности\",               //обязательный элемент\n    departmentName: \"название подразделения, которому принадлежит должность\",\n    status: \"текст статуса\",\n    statusColor: \"цвет статуса\"\n}\n\n```\n\n```\nshowProjectLinkDialog\n```\n\nПоказать стандартный диалог выбора портфеля/проекта\n\nАргументы: | handler(Function) –функция обратного вызова, в которую будет передано единственное значение{actionID:\"идентификатор проекта\",name:\"название\",elementType:Number,// 256 - план, 128 - портфель}\n\n- handler(Function) –функция обратного вызова, в которую будет передано единственное значение{actionID:\"идентификатор проекта\",name:\"название\",elementType:Number,// 256 - план, 128 - портфель}\n\n```\n{\n    actionID: \"идентификатор проекта\",\n    name: \"название\",\n    elementType: Number,   // 256 - план, 128 - портфель\n}\n\n```\n\n```\nshowRegisterLinkDialog\n```\n\nПоказать стандартный диалог выбора записи реестра\n\nАргументы: | registry(Object) – реестр, объект результат вызова апиrest/api/registry/infohandler(Function) – Функция обратного вызова, в которую будет передан идентификатор выбранного документа\n\n- registry(Object) – реестр, объект результат вызова апиrest/api/registry/info\n- handler(Function) – Функция обратного вызова, в которую будет передан идентификатор выбранного документа\n\n```\nrest/api/registry/info\n```\n\n```\nshowUserChooserDialog\n```\n\nПоказать стандартный диалог выбора пользователя\n\nАргументы: | values(Object) –список выбранных элементов, имеющих следующую структуру{personID:\"идентификатор пользователя\",// обязательное полеpersonName:\"название пользователя\",// обязательное полеpositionName:\"название должности пользователя (если существует)\",customFields:{calendarColor:\"цвет статуса\",calendarStatusLabel:\"текст статуса\"}}multiSelectable(boolean) – позволять множественный выборisGroupSelectable(boolean) – позволять выбирать группыshowWithoutPosition(boolean) – отобразить не назначенных на должностьfilterPositionID(String) – идентификатор должности для фильтрации элементовfilterDepartmentID(String) – идентификатор подразделения для фильтрации элементовlocale(String) – локаль диалогаhandler(Function) – Функция обратного вызова, в которую будет передан массив элементов,\nимеюущих ту же структуру что и поле values\n\n- values(Object) –список выбранных элементов, имеющих следующую структуру{personID:\"идентификатор пользователя\",// обязательное полеpersonName:\"название пользователя\",// обязательное полеpositionName:\"название должности пользователя (если существует)\",customFields:{calendarColor:\"цвет статуса\",calendarStatusLabel:\"текст статуса\"}}\n- multiSelectable(boolean) – позволять множественный выбор\n- isGroupSelectable(boolean) – позволять выбирать группы\n- showWithoutPosition(boolean) – отобразить не назначенных на должность\n- filterPositionID(String) – идентификатор должности для фильтрации элементов\n- filterDepartmentID(String) – идентификатор подразделения для фильтрации элементов\n- locale(String) – локаль диалога\n- handler(Function) – Функция обратного вызова, в которую будет передан массив элементов,\nимеюущих ту же структуру что и поле values\n\n```\n{\n    personID: \"идентификатор пользователя\",      // обязательное поле\n    personName: \"название пользователя\",         // обязательное поле\n    positionName: \"название должности пользователя (если существует)\",\n    customFields: {\n        calendarColor: \"цвет статуса\",\n        calendarStatusLabel: \"текст статуса\"\n    }\n}\n\n```\n\n```\nshowWaitWindow\n```\n\nПоказать окно ожидания\n\nПредупреждениеЕсли приложение запущено внутри Synergy (например ВМК), то при вызове данного метода будет\nпоказано стандартное окно ожиданияВ противном случае метод необходимо реализовать самостоятельно!\n\nПредупреждение\n\nЕсли приложение запущено внутри Synergy (например ВМК), то при вызове данного метода будет\nпоказано стандартное окно ожидания\n\nВ противном случае метод необходимо реализовать самостоятельно!\n\nПример использования AS.SERVICES.showWaitWindow/hideWaitWindow\n\n```\nhideWaitWindow\n```\n\nСкрыть окно ожидания\n\nПример использования AS.SERVICES.showWaitWindow/hideWaitWindow\n\n```\nunAuthorized\n```\n\nФункция, которая будет вызвана в случае неуспешной авторизации при вызове\nметодов REST API Synergy.\n\nПриложения могут использовать данный метод для реализации обработки случаев\nнекорректного ввода логина или пароля пользователя.\n\nПример использования AS.SERVICES.unAuthorized",
    "```\nAS.\n```\n\n```\nSERVICES\n```\n\nФункции проигрывателя форм, которые можно использовать или переопределять при разработке приложений.\n\nПодсказкаПри разработке мобильного приложения, которое использует проигрыватель форм,\nхорошей практикой будет заменить вызов стандартных диалогов на нативные.\n\nПодсказка\n\nПри разработке мобильного приложения, которое использует проигрыватель форм,\nхорошей практикой будет заменить вызов стандартных диалогов на нативные.\n\nПредупреждение\n\nПри переопределении данных функций будет переопределено базовое поведение приложения,\nвсех соответствующих компонентов.\nНапример, переопределениеshowDepartmentChooserDialog()заменит диалог у всех\nкомпонентов выбора подразделения на форме.\n\n```\nshowDepartmentChooserDialog()\n```\n\n```\nAS.\n```\n\n```\nshowDatePicker\n```\n\nПоказать компонент выбора даты\n\nАргументы: | value(Date) – дата, которая будет отмечена как выбраннаяanchor(HTMLElement) – якорный компонент, к которому следует привязать компонент выбора датыinput(HTMLElement) – компонент, которому будет передан фокус ввода после выбора датыcallback(Function) – функция обратного вызова. В функцию будет\nпередан один параметр - выбранная дата, типDate\n\n- value(Date) – дата, которая будет отмечена как выбранная\n- anchor(HTMLElement) – якорный компонент, к которому следует привязать компонент выбора даты\n- input(HTMLElement) – компонент, которому будет передан фокус ввода после выбора даты\n- callback(Function) – функция обратного вызова. В функцию будет\nпередан один параметр - выбранная дата, типDate\n\n```\nDate\n```\n\nПример использования AS.SERVICES.showDatePicker\n\n```\nshowDepartmentChooserDialog\n```\n\nПоказать стандартный диалог выбора подразделения\n\nАргументы: | values(Array) –список выбранных элементов, каждый элемент имет следующую структуру{departmentId:\"идентификатор подразделения\",// обязательное полеdepartmentName:\"название подразделения\",// обязательное полеparentName:\"название подразделения, которому принадлежит должность\",hasChildren:\"имеются ли дочерние подразделения\",status:\"текст статуса\",statusColor:\"цвет статуса\"}multiSelectable(boolean) – позволять множественный выборfilterUserID(String) – идентификатор пользователя для фильтрации элементовfilterPositionID(String) – идентификатор должности для фильтрации элементовfilterDepartmentID(String) – идентификатор подразделения для фильтрации элементовfilterChildDepartmentID(String) – идентификатор дочернего подразделения для фильтрации элементовlocale(String) – локаль диалогаhandler(Function) – функция обратного вызова, в которую будет передан\nмассив выбранных элементов, в таком же формате как и передается в метод\n\n- values(Array) –список выбранных элементов, каждый элемент имет следующую структуру{departmentId:\"идентификатор подразделения\",// обязательное полеdepartmentName:\"название подразделения\",// обязательное полеparentName:\"название подразделения, которому принадлежит должность\",hasChildren:\"имеются ли дочерние подразделения\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n- multiSelectable(boolean) – позволять множественный выбор\n- filterUserID(String) – идентификатор пользователя для фильтрации элементов\n- filterPositionID(String) – идентификатор должности для фильтрации элементов\n- filterDepartmentID(String) – идентификатор подразделения для фильтрации элементов\n- filterChildDepartmentID(String) – идентификатор дочернего подразделения для фильтрации элементов\n- locale(String) – локаль диалога\n- handler(Function) – функция обратного вызова, в которую будет передан\nмассив выбранных элементов, в таком же формате как и передается в метод\n\n```\n{\n    departmentId: \"идентификатор подразделения\",         // обязательное поле\n    departmentName: \"название подразделения\",            // обязательное поле\n    parentName: \"название подразделения, которому принадлежит должность\",\n    hasChildren: \"имеются ли дочерние подразделения\",\n    status: \"текст статуса\",\n    statusColor: \"цвет статуса\"\n}\n\n```\n\n```\nshowDropDown\n```\n\nПоказать всплывающее окно с выбором элементов\n\nАргументы: | values(Array) –массив элементов списка, каждый элемент имет следующую структуру{value:\"значение\",title:\"подпись\",selected:true}anchor(HTMLElement) – якорный компонент, к которому следует привязать всплывающее окноminWidth(Number) – минимальная ширина всплывающего окна (если не задано, то ширина будет высчитываться исходя из едемента anchor)callback(Function) – функция обратного вызова, в которую будет передано выбранное значениеString\n\n- values(Array) –массив элементов списка, каждый элемент имет следующую структуру{value:\"значение\",title:\"подпись\",selected:true}\n- anchor(HTMLElement) – якорный компонент, к которому следует привязать всплывающее окно\n- minWidth(Number) – минимальная ширина всплывающего окна (если не задано, то ширина будет высчитываться исходя из едемента anchor)\n- callback(Function) – функция обратного вызова, в которую будет передано выбранное значениеString\n\n```\n{\n    value: \"значение\",\n    title: \"подпись\",\n    selected: true\n}\n\n```\n\n```\nString\n```\n\nПример использования AS.SERVICES.showDropDown\n\n```\nshowPositionChooserDialog\n```\n\nПоказать стандартный диалог выбора должности\n\nАргументы: | values(Object) –список выбранных элементов{elementID:\"идентификатор должности\",//обязательный элементelementName:\"название должности\",//обязательный элементdepartmentName:\"название подразделения, которому принадлежит должность\",status:\"текст статуса\",statusColor:\"цвет статуса\"}multiSelect(boolean) – позволять множественный выборfilterUserId(String) – идентификатор пользователя для фильтрации элементовfilterDepartmentId(String) – идентификатор подразделения для фильтрации элементовshowVacant(boolean) – отобразить только вакантные должностиlocale(String) – локаль диалогаhandler(Function) – функция обратного вызова, в которую будет передан\nмассив выбранных элементов, в таком же формате как и передается в метод\n\n- values(Object) –список выбранных элементов{elementID:\"идентификатор должности\",//обязательный элементelementName:\"название должности\",//обязательный элементdepartmentName:\"название подразделения, которому принадлежит должность\",status:\"текст статуса\",statusColor:\"цвет статуса\"}\n- multiSelect(boolean) – позволять множественный выбор\n- filterUserId(String) – идентификатор пользователя для фильтрации элементов\n- filterDepartmentId(String) – идентификатор подразделения для фильтрации элементов\n- showVacant(boolean) – отобразить только вакантные должности\n- locale(String) – локаль диалога\n- handler(Function) – функция обратного вызова, в которую будет передан\nмассив выбранных элементов, в таком же формате как и передается в метод\n\n```\n{\n    elementID: \"идентификатор должности\",            //обязательный элемент\n    elementName: \"название должности\",               //обязательный элемент\n    departmentName: \"название подразделения, которому принадлежит должность\",\n    status: \"текст статуса\",\n    statusColor: \"цвет статуса\"\n}\n\n```\n\n```\nshowProjectLinkDialog\n```\n\nПоказать стандартный диалог выбора портфеля/проекта\n\nАргументы: | handler(Function) –функция обратного вызова, в которую будет передано единственное значение{actionID:\"идентификатор проекта\",name:\"название\",elementType:Number,// 256 - план, 128 - портфель}\n\n- handler(Function) –функция обратного вызова, в которую будет передано единственное значение{actionID:\"идентификатор проекта\",name:\"название\",elementType:Number,// 256 - план, 128 - портфель}\n\n```\n{\n    actionID: \"идентификатор проекта\",\n    name: \"название\",\n    elementType: Number,   // 256 - план, 128 - портфель\n}\n\n```\n\n```\nshowRegisterLinkDialog\n```\n\nПоказать стандартный диалог выбора записи реестра\n\nАргументы: | registry(Object) – реестр, объект результат вызова апиrest/api/registry/infohandler(Function) – Функция обратного вызова, в которую будет передан идентификатор выбранного документа\n\n- registry(Object) – реестр, объект результат вызова апиrest/api/registry/info\n- handler(Function) – Функция обратного вызова, в которую будет передан идентификатор выбранного документа\n\n```\nrest/api/registry/info\n```\n\n```\nshowUserChooserDialog\n```\n\nПоказать стандартный диалог выбора пользователя\n\nАргументы: | values(Object) –список выбранных элементов, имеющих следующую структуру{personID:\"идентификатор пользователя\",// обязательное полеpersonName:\"название пользователя\",// обязательное полеpositionName:\"название должности пользователя (если существует)\",customFields:{calendarColor:\"цвет статуса\",calendarStatusLabel:\"текст статуса\"}}multiSelectable(boolean) – позволять множественный выборisGroupSelectable(boolean) – позволять выбирать группыshowWithoutPosition(boolean) – отобразить не назначенных на должностьfilterPositionID(String) – идентификатор должности для фильтрации элементовfilterDepartmentID(String) – идентификатор подразделения для фильтрации элементовlocale(String) – локаль диалогаhandler(Function) – Функция обратного вызова, в которую будет передан массив элементов,\nимеюущих ту же структуру что и поле values\n\n- values(Object) –список выбранных элементов, имеющих следующую структуру{personID:\"идентификатор пользователя\",// обязательное полеpersonName:\"название пользователя\",// обязательное полеpositionName:\"название должности пользователя (если существует)\",customFields:{calendarColor:\"цвет статуса\",calendarStatusLabel:\"текст статуса\"}}\n- multiSelectable(boolean) – позволять множественный выбор\n- isGroupSelectable(boolean) – позволять выбирать группы\n- showWithoutPosition(boolean) – отобразить не назначенных на должность\n- filterPositionID(String) – идентификатор должности для фильтрации элементов\n- filterDepartmentID(String) – идентификатор подразделения для фильтрации элементов\n- locale(String) – локаль диалога\n- handler(Function) – Функция обратного вызова, в которую будет передан массив элементов,\nимеюущих ту же структуру что и поле values\n\n```\n{\n    personID: \"идентификатор пользователя\",      // обязательное поле\n    personName: \"название пользователя\",         // обязательное поле\n    positionName: \"название должности пользователя (если существует)\",\n    customFields: {\n        calendarColor: \"цвет статуса\",\n        calendarStatusLabel: \"текст статуса\"\n    }\n}\n\n```\n\n```\nshowWaitWindow\n```\n\nПоказать окно ожидания\n\nПредупреждениеЕсли приложение запущено внутри Synergy (например ВМК), то при вызове данного метода будет\nпоказано стандартное окно ожиданияВ противном случае метод необходимо реализовать самостоятельно!\n\nПредупреждение\n\nЕсли приложение запущено внутри Synergy (например ВМК), то при вызове данного метода будет\nпоказано стандартное окно ожидания\n\nВ противном случае метод необходимо реализовать самостоятельно!\n\nПример использования AS.SERVICES.showWaitWindow/hideWaitWindow\n\n```\nhideWaitWindow\n```\n\nСкрыть окно ожидания\n\nПример использования AS.SERVICES.showWaitWindow/hideWaitWindow\n\n```\nunAuthorized\n```\n\nФункция, которая будет вызвана в случае неуспешной авторизации при вызове\nметодов REST API Synergy.\n\nПриложения могут использовать данный метод для реализации обработки случаев\nнекорректного ввода логина или пароля пользователя.\n\nПример использования AS.SERVICES.unAuthorized",
    "```\nAS.FORMS.\n```\n\n```\nApiUtils\n```\n\nУтилиты для работы с REST API Synergy\n\nПримечаниеПри использовании данных методов адрес и порт Synergy, а также\nпараметры авторизации определяются при подключении проигрывателя форм.\nМетоды являются оберткой надjQuery.ajax()и обладают всеми его свойствами.\n\nПримечание\n\nПри использовании данных методов адрес и порт Synergy, а также\nпараметры авторизации определяются при подключении проигрывателя форм.\nМетоды являются оберткой надjQuery.ajax()и обладают всеми его свойствами.\n\n```\nAS.FORMS.ApiUtils.\n```\n\n```\nsimpleAsyncGet\n```\n\nВыполнить GET запрос по указанному URL REST API.\n\nАргументы: | urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/registry/create_doc?registryCode=someregistrycallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\nЕсли не передавать параметр, то будет использоваться дефолтное значение\"json\".data(object) – Данные запроса. Могут быть строкой, объектом или массивом.\nКонвертируются в строку запроса и добавляются к URL.errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\nReturns Object: | Объект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.С помощью него можно строить цепочки вызовов.Например так:jQuery.when(AS.FORMS.ApiUtils.get(\"url\")).then(function(result){//do somethingreturnAS.FORMS.ApiUtils.get(\"url2\")}).then(function(result){//do something}).fail(function(error){// любая ошикаб которая произойдет во// время выполнения будет обработана здесь});Или ждать результаты выполнения нескольких запросов.jQuery.when(AS.FORMS.ApiUtils.get(\"url\"),AS.FORMS.ApiUtils.get(\"url1\"),AS.FORMS.ApiUtils.get(\"url2\")).then(function(result1,result2,result3){//do something}).fail(function(error){// любая ошикаб которая произойдет во// время выполнения будет обработана здесь});\n\n- urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/registry/create_doc?registryCode=someregistry\n- callback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.\n- dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\nЕсли не передавать параметр, то будет использоваться дефолтное значение\"json\".\n- data(object) – Данные запроса. Могут быть строкой, объектом или массивом.\nКонвертируются в строку запроса и добавляются к URL.\n- errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\n\n```\nhttp://host:port/Synergy/\n```\n\n```\nrest/api/registry/create_doc?registryCode=someregistry\n```\n\n```\ndefault:'json'\n```\n\n```\n\"xml\"\n```\n\n```\n\"html\"\n```\n\n```\n\"script\"\n```\n\n```\n\"json\"\n```\n\n```\n\"jsonp\"\n```\n\n```\n\"text\"\n```\n\n```\n\"json\"\n```\n\nОбъект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.\n\nС помощью него можно строить цепочки вызовов.\n\nНапример так:\n\n```\njQuery.when(AS.FORMS.ApiUtils.get(\"url\"))\n    .then(function(result){\n        //do something\n        return AS.FORMS.ApiUtils.get(\"url2\")\n    }).then(function(result){\n        //do something\n    }).fail(function(error){\n        // любая ошикаб которая произойдет во\n        // время выполнения будет обработана здесь\n    });\n\n```\n\nИли ждать результаты выполнения нескольких запросов.\n\n```\njQuery.when(AS.FORMS.ApiUtils.get(\"url\"),\n           AS.FORMS.ApiUtils.get(\"url1\"),\n           AS.FORMS.ApiUtils.get(\"url2\"))\n    .then(function(result1, result2, result3){\n        //do something\n    }).fail(function(error){\n        // любая ошикаб которая произойдет во\n        // время выполнения будет обработана здесь\n    });\n\n```\n\n```\nAS.FORMS.ApiUtils.\n```\n\n```\nsimpleAsyncPost\n```\n\nВыполнить POST запрос по указанному URL REST API.\n\nАргументы: | urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/asforms/data/savecallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".data(object) – Данные запроса. Должны соответствовать параметруcontentTypecontentType(String) –default:'application/x-www-form-urlencoded;charset=UTF-8'Тип данных запроса.errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\nReturns Object: | Объект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.Примечаниеподробнее об этом написано в документации к методуsimpleAsyncGet\n\n- urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/asforms/data/save\n- callback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.\n- dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\n- data(object) – Данные запроса. Должны соответствовать параметруcontentType\n- contentType(String) –default:'application/x-www-form-urlencoded;charset=UTF-8'Тип данных запроса.\n- errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\n\n```\nhttp://host:port/Synergy/\n```\n\n```\nrest/api/asforms/data/save\n```\n\n```\ndefault:'json'\n```\n\n```\n\"xml\"\n```\n\n```\n\"html\"\n```\n\n```\n\"script\"\n```\n\n```\n\"json\"\n```\n\n```\n\"jsonp\"\n```\n\n```\n\"text\"\n```\n\n```\ncontentType\n```\n\n```\ndefault:'application/x-www-form-urlencoded; charset=UTF-8'\n```\n\nОбъект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.\n\nПримечание\n\nподробнее об этом написано в документации к методуsimpleAsyncGet\n\n```\nsimpleAsyncGet\n```",
    "```\nAS.FORMS.\n```\n\n```\nApiUtils\n```\n\nУтилиты для работы с REST API Synergy\n\nПримечаниеПри использовании данных методов адрес и порт Synergy, а также\nпараметры авторизации определяются при подключении проигрывателя форм.\nМетоды являются оберткой надjQuery.ajax()и обладают всеми его свойствами.\n\nПримечание\n\nПри использовании данных методов адрес и порт Synergy, а также\nпараметры авторизации определяются при подключении проигрывателя форм.\nМетоды являются оберткой надjQuery.ajax()и обладают всеми его свойствами.\n\n```\nAS.FORMS.ApiUtils.\n```\n\n```\nsimpleAsyncGet\n```\n\nВыполнить GET запрос по указанному URL REST API.\n\nАргументы: | urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/registry/create_doc?registryCode=someregistrycallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\nЕсли не передавать параметр, то будет использоваться дефолтное значение\"json\".data(object) – Данные запроса. Могут быть строкой, объектом или массивом.\nКонвертируются в строку запроса и добавляются к URL.errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\nReturns Object: | Объект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.С помощью него можно строить цепочки вызовов.Например так:jQuery.when(AS.FORMS.ApiUtils.get(\"url\")).then(function(result){//do somethingreturnAS.FORMS.ApiUtils.get(\"url2\")}).then(function(result){//do something}).fail(function(error){// любая ошикаб которая произойдет во// время выполнения будет обработана здесь});Или ждать результаты выполнения нескольких запросов.jQuery.when(AS.FORMS.ApiUtils.get(\"url\"),AS.FORMS.ApiUtils.get(\"url1\"),AS.FORMS.ApiUtils.get(\"url2\")).then(function(result1,result2,result3){//do something}).fail(function(error){// любая ошикаб которая произойдет во// время выполнения будет обработана здесь});\n\n- urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/registry/create_doc?registryCode=someregistry\n- callback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.\n- dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\nЕсли не передавать параметр, то будет использоваться дефолтное значение\"json\".\n- data(object) – Данные запроса. Могут быть строкой, объектом или массивом.\nКонвертируются в строку запроса и добавляются к URL.\n- errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\n\n```\nhttp://host:port/Synergy/\n```\n\n```\nrest/api/registry/create_doc?registryCode=someregistry\n```\n\n```\ndefault:'json'\n```\n\n```\n\"xml\"\n```\n\n```\n\"html\"\n```\n\n```\n\"script\"\n```\n\n```\n\"json\"\n```\n\n```\n\"jsonp\"\n```\n\n```\n\"text\"\n```\n\n```\n\"json\"\n```\n\nОбъект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.\n\nС помощью него можно строить цепочки вызовов.\n\nНапример так:\n\n```\njQuery.when(AS.FORMS.ApiUtils.get(\"url\"))\n    .then(function(result){\n        //do something\n        return AS.FORMS.ApiUtils.get(\"url2\")\n    }).then(function(result){\n        //do something\n    }).fail(function(error){\n        // любая ошикаб которая произойдет во\n        // время выполнения будет обработана здесь\n    });\n\n```\n\nИли ждать результаты выполнения нескольких запросов.\n\n```\njQuery.when(AS.FORMS.ApiUtils.get(\"url\"),\n           AS.FORMS.ApiUtils.get(\"url1\"),\n           AS.FORMS.ApiUtils.get(\"url2\"))\n    .then(function(result1, result2, result3){\n        //do something\n    }).fail(function(error){\n        // любая ошикаб которая произойдет во\n        // время выполнения будет обработана здесь\n    });\n\n```\n\n```\nAS.FORMS.ApiUtils.\n```\n\n```\nsimpleAsyncPost\n```\n\nВыполнить POST запрос по указанному URL REST API.\n\nАргументы: | urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/asforms/data/savecallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".data(object) – Данные запроса. Должны соответствовать параметруcontentTypecontentType(String) –default:'application/x-www-form-urlencoded;charset=UTF-8'Тип данных запроса.errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\nReturns Object: | Объект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.Примечаниеподробнее об этом написано в документации к методуsimpleAsyncGet\n\n- urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/asforms/data/save\n- callback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.\n- dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\n- data(object) – Данные запроса. Должны соответствовать параметруcontentType\n- contentType(String) –default:'application/x-www-form-urlencoded;charset=UTF-8'Тип данных запроса.\n- errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\n\n```\nhttp://host:port/Synergy/\n```\n\n```\nrest/api/asforms/data/save\n```\n\n```\ndefault:'json'\n```\n\n```\n\"xml\"\n```\n\n```\n\"html\"\n```\n\n```\n\"script\"\n```\n\n```\n\"json\"\n```\n\n```\n\"jsonp\"\n```\n\n```\n\"text\"\n```\n\n```\ncontentType\n```\n\n```\ndefault:'application/x-www-form-urlencoded; charset=UTF-8'\n```\n\nОбъект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.\n\nПримечание\n\nподробнее об этом написано в документации к методуsimpleAsyncGet\n\n```\nsimpleAsyncGet\n```",
    "AS.FORMS.\n\nApiUtils\n\nУтилиты для работы с REST API Synergy\n\nПримечание\n\nПри использовании данных методов адрес и порт Synergy, а также\nпараметры авторизации определяются при подключении проигрывателя форм.\nМетоды являются оберткой надjQuery.ajax()и обладают всеми его свойствами.\n\nAS.FORMS.ApiUtils.\n\nsimpleAsyncGet\n\nВыполнить GET запрос по указанному URL REST API.\n\nАргументы:urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/registry/create_doc?registryCode=someregistrycallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\nЕсли не передавать параметр, то будет использоваться дефолтное значение\"json\".data(object) – Данные запроса. Могут быть строкой, объектом или массивом.\nКонвертируются в строку запроса и добавляются к URL.errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.Returns Object:Объект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.С помощью него можно строить цепочки вызовов.Например так:jQuery.when(AS.FORMS.ApiUtils.get(\"url\")).then(function(result){//do somethingreturnAS.FORMS.ApiUtils.get(\"url2\")}).then(function(result){//do something}).fail(function(error){// любая ошикаб которая произойдет во// время выполнения будет обработана здесь});Или ждать результаты выполнения нескольких запросов.jQuery.when(AS.FORMS.ApiUtils.get(\"url\"),AS.FORMS.ApiUtils.get(\"url1\"),AS.FORMS.ApiUtils.get(\"url2\")).then(function(result1,result2,result3){//do something}).fail(function(error){// любая ошикаб которая произойдет во// время выполнения будет обработана здесь});\n\nurlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/registry/create_doc?registryCode=someregistrycallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\nЕсли не передавать параметр, то будет использоваться дефолтное значение\"json\".data(object) – Данные запроса. Могут быть строкой, объектом или массивом.\nКонвертируются в строку запроса и добавляются к URL.errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\n\nurlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/registry/create_doc?registryCode=someregistry\n\nhttp://host:port/Synergy/\n\nrest/api/registry/create_doc?registryCode=someregistry\n\ncallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.\n\ndataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\nЕсли не передавать параметр, то будет использоваться дефолтное значение\"json\".\n\ndefault:'json'\n\n\"xml\"\n\n\"html\"\n\n\"script\"\n\n\"json\"\n\n\"jsonp\"\n\n\"text\"\n\n\"json\"\n\ndata(object) – Данные запроса. Могут быть строкой, объектом или массивом.\nКонвертируются в строку запроса и добавляются к URL.\n\nerrorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\n\nОбъект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.\n\nС помощью него можно строить цепочки вызовов.\n\nНапример так:\n\njQuery.when(AS.FORMS.ApiUtils.get(\"url\")).then(function(result){//do somethingreturnAS.FORMS.ApiUtils.get(\"url2\")}).then(function(result){//do something}).fail(function(error){// любая ошикаб которая произойдет во// время выполнения будет обработана здесь});\n\nИли ждать результаты выполнения нескольких запросов.\n\njQuery.when(AS.FORMS.ApiUtils.get(\"url\"),AS.FORMS.ApiUtils.get(\"url1\"),AS.FORMS.ApiUtils.get(\"url2\")).then(function(result1,result2,result3){//do something}).fail(function(error){// любая ошикаб которая произойдет во// время выполнения будет обработана здесь});\n\nAS.FORMS.ApiUtils.\n\nsimpleAsyncPost\n\nВыполнить POST запрос по указанному URL REST API.\n\nАргументы:urlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/asforms/data/savecallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".data(object) – Данные запроса. Должны соответствовать параметруcontentTypecontentType(String) –default:'application/x-www-form-urlencoded;charset=UTF-8'Тип данных запроса.errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.Returns Object:Объект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.Примечаниеподробнее об этом написано в документации к методуsimpleAsyncGet\n\nurlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/asforms/data/savecallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.dataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".data(object) – Данные запроса. Должны соответствовать параметруcontentTypecontentType(String) –default:'application/x-www-form-urlencoded;charset=UTF-8'Тип данных запроса.errorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\n\nurlPart(String) – Часть URL метода REST API, безhttp://host:port/Synergy/,\nнапримерrest/api/asforms/data/save\n\nhttp://host:port/Synergy/\n\nrest/api/asforms/data/save\n\ncallback(function) – Функция, которая будет вызвана в случае успешного выполнения запроса.\nВ данную функцию передается один параметр - ответ на запрос.\n\ndataType(String) –default:'json'Тип данных ответа на запрос.\nМожет принимать значения:\"xml\",\"html\",\"script\",\"json\",\"jsonp\",\"text\".\n\ndefault:'json'\n\n\"xml\"\n\n\"html\"\n\n\"script\"\n\n\"json\"\n\n\"jsonp\"\n\n\"text\"\n\ndata(object) – Данные запроса. Должны соответствовать параметруcontentType\n\ncontentType\n\ncontentType(String) –default:'application/x-www-form-urlencoded;charset=UTF-8'Тип данных запроса.\n\ndefault:'application/x-www-form-urlencoded;charset=UTF-8'\n\nerrorHandler(function) – Функция, которая будет вызвана в случае неуспешного выполнения запроса.\n\nОбъект, содержащий Promise объект, который используется для отслеживания асинхронных вызовов.\n\nПримечание\n\nподробнее об этом написано в документации к методуsimpleAsyncGet\n\nsimpleAsyncGet",
    "```\nAS.\n```\n\n```\nLOGGER\n```\n\nЛоггер сообщений\n\n```\nAS.LOGGER.\n```\n\n```\nlog\n```\n\nВывести сообщение в консоль браузера\n\nАргументы: | message(String) – сообщение\n\n- message(String) – сообщение\n\n```\nAS.LOGGER.\n```\n\n```\nlogError\n```\n\nВывести ошибку в консоль браузера\n\nАргументы: | error(Error) – ошибка исполнения\n\n- error(Error) – ошибка исполнения\n\n```\nAS.LOGGER.\n```\n\n```\nlogServer\n```\n\nВывести ошибку в серверный лог Synergy\n\nАргументы: | error(Error) – ошибка исполненияformId(String) – идентификатор формыasfDataId(String) – идентификатор данных формы\n\n- error(Error) – ошибка исполнения\n- formId(String) – идентификатор формы\n- asfDataId(String) – идентификатор данных формы",
    "```\nAS.\n```\n\n```\nLOGGER\n```\n\nЛоггер сообщений\n\n```\nAS.LOGGER.\n```\n\n```\nlog\n```\n\nВывести сообщение в консоль браузера\n\nАргументы: | message(String) – сообщение\n\n- message(String) – сообщение\n\n```\nAS.LOGGER.\n```\n\n```\nlogError\n```\n\nВывести ошибку в консоль браузера\n\nАргументы: | error(Error) – ошибка исполнения\n\n- error(Error) – ошибка исполнения\n\n```\nAS.LOGGER.\n```\n\n```\nlogServer\n```\n\nВывести ошибку в серверный лог Synergy\n\nАргументы: | error(Error) – ошибка исполненияformId(String) – идентификатор формыasfDataId(String) – идентификатор данных формы\n\n- error(Error) – ошибка исполнения\n- formId(String) – идентификатор формы\n- asfDataId(String) – идентификатор данных формы"
  ],
  "metadatas": [
    {
      "title": "3.1. Схемы работы проигрывателя",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/form_scripting.html#id3"
    },
    {
      "title": "3.2. Общедоступные объекты",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/form_scripting.html#id4"
    },
    {
      "title": "3.3. Особенности реализации",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/form_scripting.html#id5"
    },
    {
      "title": "3.4. Пользовательский компонент",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/form_scripting.html#id6"
    },
    {
      "title": "3.4.1. Пользовательский компонент Кнопка",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/user-cmp/button-cmp.html"
    },
    {
      "title": "3.4.1. Пользовательский компонент Кнопка",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/user-cmp/button-cmp.html"
    },
    {
      "title": "3.4.2. Пользовательский компонент Выбор и создание записи реестра",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/user-cmp/registry-chooser.html"
    },
    {
      "title": "3.4.2. Пользовательский компонент Выбор и создание записи реестра",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/user-cmp/registry-chooser.html"
    },
    {
      "title": "3.4.3. Пользовательский компонент Воронка продаж",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/user-cmp/funnel.html"
    },
    {
      "title": "3.4.3. Пользовательский компонент Воронка продаж",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/user-cmp/funnel.html"
    },
    {
      "title": "3.5. Справочник API",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/form_scripting.html#api"
    },
    {
      "title": "3.5.1. Параметры приложения",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/options.html"
    },
    {
      "title": "3.5.1. Параметры приложения",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/options.html"
    },
    {
      "title": "3.5.2. Проигрыватель",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/player.html"
    },
    {
      "title": "3.5.2. Проигрыватель",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/player.html"
    },
    {
      "title": "3.5.3. Компоненты",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/index.html"
    },
    {
      "title": "3.5.3. Компоненты",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/index.html"
    },
    {
      "title": "3.5.3.1. Базовые",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/base.html"
    },
    {
      "title": "3.5.3.2. «Страница» и «Таблица»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/table.html"
    },
    {
      "title": "3.5.3.3. «Неизменяемый текст»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/label.html"
    },
    {
      "title": "3.5.3.4. «Однострочное поле»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/textbox.html"
    },
    {
      "title": "3.5.3.5. «Числовое поле»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/numericinput.html"
    },
    {
      "title": "3.5.3.6. «Многострочный текст»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/textarea.html"
    },
    {
      "title": "3.5.3.7. «HTD-редактор»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/htd-editor.html"
    },
    {
      "title": "3.5.3.8. «Выпадающий список»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/listbox.html"
    },
    {
      "title": "3.5.3.9. «Дата/время»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/date.html"
    },
    {
      "title": "3.5.3.10. «Выбор вариантов»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/check.html"
    },
    {
      "title": "3.5.3.11. «Переключатель вариантов»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/radio.html"
    },
    {
      "title": "3.5.3.12. «Изображение»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/image.html"
    },
    {
      "title": "3.5.3.13. «Файл»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/file.html"
    },
    {
      "title": "3.5.3.14. «Ссылка»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/link.html"
    },
    {
      "title": "3.5.3.15. «Объекты Synergy»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/entity.html"
    },
    {
      "title": "3.5.3.16. «Счетчик»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/counter.html"
    },
    {
      "title": "3.5.3.17. «Лист подписей»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/signlist.html"
    },
    {
      "title": "3.5.3.18. «Лист резолюций»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/resolutionlist.html"
    },
    {
      "title": "3.5.3.19. «Ход выполнения»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/processlist.html"
    },
    {
      "title": "3.5.3.20. «Ссылка на документ»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/doclink.html"
    },
    {
      "title": "3.5.3.21. «Период повторения»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/repeater.html"
    },
    {
      "title": "3.5.3.22. «Ссылка на проект/портфель»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/projectlink.html"
    },
    {
      "title": "3.5.3.23. «Ссылка на реестр»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/reglink.html"
    },
    {
      "title": "3.5.3.24. «Ссылка на адресную книгу»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/personlink.html"
    },
    {
      "title": "3.5.3.25. «Свойства документа»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/docnumber.html"
    },
    {
      "title": "3.5.3.26. «Ссылка на файл в хранилище»",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/cmp/filelink.html"
    },
    {
      "title": "3.5.4. Сервисы",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/services.html"
    },
    {
      "title": "3.5.4. Сервисы",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/services.html"
    },
    {
      "title": "3.5.5. Утилиты",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/utils.html"
    },
    {
      "title": "3.5.5. Утилиты",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/utils.html"
    },
    {
      "title": "3.5.5.1. AS.FORMS.ApiUtils",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/utils.html#as-forms-apiutils"
    },
    {
      "title": "3.5.6. Логгер",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/logger.html"
    },
    {
      "title": "3.5.6. Логгер",
      "url": "http://rtd.lan.arta.kz/docs/guide/ru/minsky/forms/logger.html"
    }
  ],
  "ids": [
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47",
    "48",
    "49",
    "50"
  ]
}